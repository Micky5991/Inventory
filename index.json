{
  "api/index.html": {
    "href": "api/index.html",
    "title": "Inventory API reference",
    "keywords": "Inventory API reference You can find all available types and their documentation in the namespace tree under their namespace. These documentation was generated from XML documentation comments available in your IDE."
  },
  "api/Micky5991.Inventory.AggregatedServices.AggregatedInventoryServices.html": {
    "href": "api/Micky5991.Inventory.AggregatedServices.AggregatedInventoryServices.html",
    "title": "Class AggregatedInventoryServices",
    "keywords": "Class AggregatedInventoryServices Simplified aggregation of services an item has. Inheritance System.Object AggregatedInventoryServices Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory.AggregatedServices Assembly : Micky5991.Inventory.dll Syntax public class AggregatedInventoryServices Constructors | Improve this Doc View Source AggregatedInventoryServices(IItemRegistry) Initializes a new instance of the AggregatedInventoryServices class. Declaration public AggregatedInventoryServices(IItemRegistry itemRegistry) Parameters Type Name Description IItemRegistry itemRegistry Non-null instance of IItemRegistry . Properties | Improve this Doc View Source ItemRegistry Gets an instance of IItemRegistry . Declaration public IItemRegistry ItemRegistry { get; } Property Value Type Description IItemRegistry"
  },
  "api/Micky5991.Inventory.AggregatedServices.AggregatedItemServices.html": {
    "href": "api/Micky5991.Inventory.AggregatedServices.AggregatedItemServices.html",
    "title": "Class AggregatedItemServices",
    "keywords": "Class AggregatedItemServices Simplified aggregation of services an item has. Inheritance System.Object AggregatedItemServices Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory.AggregatedServices Assembly : Micky5991.Inventory.dll Syntax public class AggregatedItemServices Constructors | Improve this Doc View Source AggregatedItemServices(IItemMergeStrategyHandler, IItemSplitStrategyHandler, IItemFactory) Initializes a new instance of the AggregatedItemServices class. Declaration public AggregatedItemServices(IItemMergeStrategyHandler itemMergeStrategyHandler, IItemSplitStrategyHandler itemSplitStrategyHandler, IItemFactory itemFactory) Parameters Type Name Description IItemMergeStrategyHandler itemMergeStrategyHandler An non null-implementation of IItemMergeStrategyHandler . IItemSplitStrategyHandler itemSplitStrategyHandler An non null-implementation of IItemSplitStrategyHandler . IItemFactory itemFactory An non null-implementation of IItemFactory . Properties | Improve this Doc View Source ItemFactory Gets the passed IItemFactory service. Declaration public IItemFactory ItemFactory { get; } Property Value Type Description IItemFactory | Improve this Doc View Source ItemMergeStrategyHandler Gets the passed IItemMergeStrategyHandler service. Declaration public IItemMergeStrategyHandler ItemMergeStrategyHandler { get; } Property Value Type Description IItemMergeStrategyHandler | Improve this Doc View Source ItemSplitStrategyHandler Gets the passed IItemSplitStrategyHandler service. Declaration public IItemSplitStrategyHandler ItemSplitStrategyHandler { get; } Property Value Type Description IItemSplitStrategyHandler"
  },
  "api/Micky5991.Inventory.AggregatedServices.html": {
    "href": "api/Micky5991.Inventory.AggregatedServices.html",
    "title": "Namespace Micky5991.Inventory.AggregatedServices",
    "keywords": "Namespace Micky5991.Inventory.AggregatedServices Classes AggregatedInventoryServices Simplified aggregation of services an item has. AggregatedItemServices Simplified aggregation of services an item has."
  },
  "api/Micky5991.Inventory.BaseItemRegistry.html": {
    "href": "api/Micky5991.Inventory.BaseItemRegistry.html",
    "title": "Class BaseItemRegistry",
    "keywords": "Class BaseItemRegistry Registry of ItemMeta indexed by item handle. Inheritance System.Object BaseItemRegistry Implements IItemRegistry Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory Assembly : Micky5991.Inventory.dll Syntax public abstract class BaseItemRegistry : IItemRegistry Methods | Improve this Doc View Source CreateItemMeta<T>(String, String, Int32, ItemFlags) Simple utility function to create an ItemMeta instance. Declaration protected ItemMeta CreateItemMeta<T>(string itemHandle, string displayName, int defaultWeight = 1, ItemFlags flags = ItemFlags.None) where T : IItem Parameters Type Name Description System.String itemHandle Unique handle which identifies this ItemMeta . System.String displayName Default display name of this item. System.Int32 defaultWeight Default single-weight of this item. ItemFlags flags Flags which specify certain behavor aspects. Returns Type Description ItemMeta The created ItemMeta instance. Type Parameters Name Description T ChildClass that represents this ItemMeta . Exceptions Type Condition System.ArgumentNullException itemHandle , displayName is null. | Improve this Doc View Source GetItemMeta() Returns a list of all available ItemMeta instances available to the inventory framework. Declaration public ICollection<ItemMeta> GetItemMeta() Returns Type Description System.Collections.Generic.ICollection < ItemMeta > List of ItemMeta . | Improve this Doc View Source LoadItemMeta() Executes a single initialization of all ItemMeta instances. Declaration protected abstract IEnumerable<ItemMeta> LoadItemMeta() Returns Type Description System.Collections.Generic.IEnumerable < ItemMeta > Returns the list of created ItemMeta . | Improve this Doc View Source TryGetItemMeta(String, out ItemMeta) Returns the instance of ItemMeta for the given handle . Declaration public bool TryGetItemMeta(string handle, out ItemMeta meta) Parameters Type Name Description System.String handle Unique handle to search for. ItemMeta meta Instance of ItemMeta that has been found by handle . Returns Type Description System.Boolean true if an ItemMeta instance has been found, false otherwise. Exceptions Type Condition System.ArgumentNullException meta is null, empty or whitespace. | Improve this Doc View Source ValidateAndCacheItemMeta() Validates the supplied ItemMeta and throws exception if invalid. Declaration public void ValidateAndCacheItemMeta() Exceptions Type Condition InvalidItemRegistryException Any supplied ItemMeta was invalid. Implements IItemRegistry See Also BaseItemRegistry"
  },
  "api/Micky5991.Inventory.Data.html": {
    "href": "api/Micky5991.Inventory.Data.html",
    "title": "Namespace Micky5991.Inventory.Data",
    "keywords": "Namespace Micky5991.Inventory.Data Classes IncomingItemActionData Data container to pass to the action with arguments how to run the action. ItemActionData Base class that repreents any data related to IItemAction<TOut, TIn> . OutgoingItemActionData Data which is usable to display an item action in a user interface."
  },
  "api/Micky5991.Inventory.Data.IncomingItemActionData.html": {
    "href": "api/Micky5991.Inventory.Data.IncomingItemActionData.html",
    "title": "Class IncomingItemActionData",
    "keywords": "Class IncomingItemActionData Data container to pass to the action with arguments how to run the action. Inheritance System.Object ItemActionData IncomingItemActionData Inherited Members ItemActionData.ActionRuntimeId System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory.Data Assembly : Micky5991.Inventory.dll Syntax public class IncomingItemActionData : ItemActionData Constructors | Improve this Doc View Source IncomingItemActionData(Guid) Initializes a new instance of the IncomingItemActionData class. Declaration public IncomingItemActionData(Guid actionRuntimeId) Parameters Type Name Description System.Guid actionRuntimeId Guid of the related IItemAction<TOut, TIn> instance."
  },
  "api/Micky5991.Inventory.Data.ItemActionData.html": {
    "href": "api/Micky5991.Inventory.Data.ItemActionData.html",
    "title": "Class ItemActionData",
    "keywords": "Class ItemActionData Base class that repreents any data related to IItemAction<TOut, TIn> . Inheritance System.Object ItemActionData IncomingItemActionData OutgoingItemActionData Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory.Data Assembly : Micky5991.Inventory.dll Syntax public abstract class ItemActionData Constructors | Improve this Doc View Source ItemActionData(Guid) Initializes a new instance of the ItemActionData class. Declaration protected ItemActionData(Guid actionRuntimeId) Parameters Type Name Description System.Guid actionRuntimeId Guid of the related IItemAction<TOut, TIn> instance. Properties | Improve this Doc View Source ActionRuntimeId Gets the RuntimeId of the related IItemAction<TOut, TIn> of this payload. Declaration public Guid ActionRuntimeId { get; } Property Value Type Description System.Guid"
  },
  "api/Micky5991.Inventory.Data.OutgoingItemActionData.html": {
    "href": "api/Micky5991.Inventory.Data.OutgoingItemActionData.html",
    "title": "Class OutgoingItemActionData",
    "keywords": "Class OutgoingItemActionData Data which is usable to display an item action in a user interface. Inheritance System.Object ItemActionData OutgoingItemActionData Inherited Members ItemActionData.ActionRuntimeId System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory.Data Assembly : Micky5991.Inventory.dll Syntax public class OutgoingItemActionData : ItemActionData Constructors | Improve this Doc View Source OutgoingItemActionData(Guid) Initializes a new instance of the OutgoingItemActionData class. Declaration public OutgoingItemActionData(Guid actionRuntimeId) Parameters Type Name Description System.Guid actionRuntimeId Guid of the related IItemAction<TOut, TIn> instance."
  },
  "api/Micky5991.Inventory.Entities.Actions.html": {
    "href": "api/Micky5991.Inventory.Entities.Actions.html",
    "title": "Namespace Micky5991.Inventory.Entities.Actions",
    "keywords": "Namespace Micky5991.Inventory.Entities.Actions Classes ItemActionBase<TOut, TIn> Base class that offers basic functionality for item actions like visible or enabled states."
  },
  "api/Micky5991.Inventory.Entities.Actions.ItemActionBase-2.html": {
    "href": "api/Micky5991.Inventory.Entities.Actions.ItemActionBase-2.html",
    "title": "Class ItemActionBase<TOut, TIn>",
    "keywords": "Class ItemActionBase<TOut, TIn> Base class that offers basic functionality for item actions like visible or enabled states. Inheritance System.Object ItemActionBase<TOut, TIn> Implements IItemAction <TOut, TIn> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory.Entities.Actions Assembly : Micky5991.Inventory.dll Syntax [PublicAPI] public abstract class ItemActionBase<TOut, TIn> : IItemAction<TOut, TIn> where TOut : OutgoingItemActionData where TIn : IncomingItemActionData Type Parameters Name Description TOut Outgoing data for this item action. TIn Incoming data for this item action. Constructors | Improve this Doc View Source ItemActionBase() Initializes a new instance of the ItemActionBase<TOut, TIn> class. Declaration protected ItemActionBase() Properties | Improve this Doc View Source RelatedItem Gets the reference to the item where this action was added to. Declaration public IItem RelatedItem { get; } Property Value Type Description IItem | Improve this Doc View Source RuntimeId Gets a non persistant identifier of this action that should ONLY be used for communication in runtime and during the lifetime of this item. Declaration public Guid RuntimeId { get; } Property Value Type Description System.Guid Methods | Improve this Doc View Source BuildActionData(Object) Builds the item action data that can be used for communication with an user interface. Declaration public abstract TOut BuildActionData(object receiver) Parameters Type Name Description System.Object receiver Instance of the receiver for which this data should be generated for. Returns Type Description TOut Created action data of this instance. | Improve this Doc View Source Execute(Object, TIn) Executes this action with given data. Declaration public abstract void Execute(object executor, TIn data) Parameters Type Name Description System.Object executor Instance that executes this action. Like a user that executes an action on an item. TIn data Data that holds information about the actual usage of this action. Exceptions Type Condition System.ArgumentNullException data is null. | Improve this Doc View Source IsEnabled(Object) Returns if the item action is enabled. Declaration public bool IsEnabled(object receiver) Parameters Type Name Description System.Object receiver Reference to the receiver for which the enabled-status should be checked for. Returns Type Description System.Boolean true if the action is enabled, false otherwise. | Improve this Doc View Source IsVisible(Object) Returns if the item action is visible. Declaration public bool IsVisible(object receiver) Parameters Type Name Description System.Object receiver Reference to the receiver for which the visibility should be checked for. Returns Type Description System.Boolean true if the action is visible, false otherwise. | Improve this Doc View Source SetEnabledCheck(InventoryDelegates.ActionEnabledDelegate) Sets the current check that will be used to determine if the action is enabled. If the action is not visible, this action is also implicitly disabled. Declaration public IItemAction<TOut, TIn> SetEnabledCheck(InventoryDelegates.ActionEnabledDelegate newEnabledCheck) Parameters Type Name Description InventoryDelegates.ActionEnabledDelegate newEnabledCheck Returns Type Description IItemAction <TOut, TIn> Current IItemAction<TOut, TIn> instance. | Improve this Doc View Source SetRelatedItem(IItem) Sets the item reference where this action was added to. Declaration public void SetRelatedItem(IItem item) Parameters Type Name Description IItem item Reference to the related item. Exceptions Type Condition System.ArgumentNullException item is null. | Improve this Doc View Source SetVisibleCheck(InventoryDelegates.ActionVisibleDelegate) Sets the current check that will be used to determine if the action is visible. Declaration public IItemAction<TOut, TIn> SetVisibleCheck(InventoryDelegates.ActionVisibleDelegate newVisibleCheck) Parameters Type Name Description InventoryDelegates.ActionVisibleDelegate newVisibleCheck Returns Type Description IItemAction <TOut, TIn> Current IItemAction<TOut, TIn> instance. Implements IItemAction<TOut, TIn>"
  },
  "api/Micky5991.Inventory.Entities.Factories.html": {
    "href": "api/Micky5991.Inventory.Entities.Factories.html",
    "title": "Namespace Micky5991.Inventory.Entities.Factories",
    "keywords": "Namespace Micky5991.Inventory.Entities.Factories Classes InventoryFactory Factory that creates a specific implementation of IInventory . ItemFactory Factory that creates actual implementations for IItem ."
  },
  "api/Micky5991.Inventory.Entities.Factories.InventoryFactory.html": {
    "href": "api/Micky5991.Inventory.Entities.Factories.InventoryFactory.html",
    "title": "Class InventoryFactory",
    "keywords": "Class InventoryFactory Factory that creates a specific implementation of IInventory . Inheritance System.Object InventoryFactory Implements IInventoryFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory.Entities.Factories Assembly : Micky5991.Inventory.dll Syntax public class InventoryFactory : IInventoryFactory Constructors | Improve this Doc View Source InventoryFactory(AggregatedInventoryServices) Initializes a new instance of the InventoryFactory class. Declaration public InventoryFactory(AggregatedInventoryServices inventoryServices) Parameters Type Name Description AggregatedInventoryServices inventoryServices Services which are required to run a default Micky5991.Inventory.Entities.Inventory instance. Methods | Improve this Doc View Source CreateInventory(Int32) Creates a new IInventory instance. Declaration public IInventory CreateInventory(int capacity) Parameters Type Name Description System.Int32 capacity Capacity limit the inventory should have. Returns Type Description IInventory Newly created IInventory . Exceptions Type Condition System.ArgumentOutOfRangeException capacity is below 0. Implements IInventoryFactory"
  },
  "api/Micky5991.Inventory.Entities.Factories.ItemFactory.html": {
    "href": "api/Micky5991.Inventory.Entities.Factories.ItemFactory.html",
    "title": "Class ItemFactory",
    "keywords": "Class ItemFactory Factory that creates actual implementations for IItem . Inheritance System.Object ItemFactory Implements IItemFactory Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory.Entities.Factories Assembly : Micky5991.Inventory.dll Syntax public class ItemFactory : IItemFactory Constructors | Improve this Doc View Source ItemFactory(IItemRegistry, IServiceProvider) Initializes a new instance of the ItemFactory class. Declaration public ItemFactory(IItemRegistry registry, IServiceProvider serviceProvider) Parameters Type Name Description IItemRegistry registry Needed registry-service reference. System.IServiceProvider serviceProvider Needed serviceprovider reference. Methods | Improve this Doc View Source CreateItem(ItemMeta, Int32) Creates an instance of IItem from the given meta . Declaration public IItem CreateItem(ItemMeta meta, int amount) Parameters Type Name Description ItemMeta meta ItemMeta to create the item from. System.Int32 amount Positive amount of items the resulting item shout have. Returns Type Description IItem Instance of the requested meta . Exceptions Type Condition System.ArgumentNullException meta is null. System.ArgumentOutOfRangeException amount is too low. | Improve this Doc View Source CreateItem(String, Int32) Creates an instance of IItem and search IItemRegistry for the given handle . Declaration public IItem CreateItem(string handle, int amount) Parameters Type Name Description System.String handle Handle to search for. System.Int32 amount Positive amount of items the resulting item shout have. Returns Type Description IItem Instance of the requested handle , null if no ItemMeta has been found. Exceptions Type Condition System.ArgumentNullException handle is null, empty or whitespace. System.ArgumentOutOfRangeException amount is too low. | Improve this Doc View Source CreateItems(ItemMeta, Int32) Creates a list of items from the given ItemMeta . If the item is not stackable, multiple items will be created with amount of 1 each. Declaration public ICollection<IItem> CreateItems(ItemMeta meta, int amount) Parameters Type Name Description ItemMeta meta Definition of the item that should be created. System.Int32 amount Positive amount of items that should be created. Returns Type Description System.Collections.Generic.ICollection < IItem > The list of created items. Exceptions Type Condition System.ArgumentNullException meta is null. System.ArgumentOutOfRangeException amount is 0 or lower. | Improve this Doc View Source CreateItems(String, Int32) Creates a list of items from the given handle . If the item is not stackable, it will create multiple items with item amount of 1 each. Declaration public ICollection<IItem> CreateItems(string handle, int amount) Parameters Type Name Description System.String handle Item identifier to search for. System.Int32 amount Positive amount of items that should be created. Returns Type Description System.Collections.Generic.ICollection < IItem > Created collection of items, null if no ItemMeta could be found. Exceptions Type Condition System.ArgumentNullException handle is null, empty or whitespace. System.ArgumentOutOfRangeException amount is 0 or lower. Implements IItemFactory"
  },
  "api/Micky5991.Inventory.Entities.Inventory.html": {
    "href": "api/Micky5991.Inventory.Entities.Inventory.html",
    "title": "Namespace Micky5991.Inventory.Entities.Inventory",
    "keywords": "Namespace Micky5991.Inventory.Entities.Inventory Classes Inventory Container of IItem instances with a finite capacity limit."
  },
  "api/Micky5991.Inventory.Entities.Inventory.Inventory.html": {
    "href": "api/Micky5991.Inventory.Entities.Inventory.Inventory.html",
    "title": "Class Inventory",
    "keywords": "Class Inventory Container of IItem instances with a finite capacity limit. Inheritance System.Object Inventory Implements IInventory System.ComponentModel.INotifyPropertyChanged Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory.Entities.Inventory Assembly : Micky5991.Inventory.dll Syntax public class Inventory : IInventory, INotifyPropertyChanged Constructors | Improve this Doc View Source Inventory(Int32, AggregatedInventoryServices) Initializes a new instance of the Inventory class. Declaration public Inventory(int capacity, AggregatedInventoryServices inventoryServices) Parameters Type Name Description System.Int32 capacity Capacity of this inventory. AggregatedInventoryServices inventoryServices Needed services of this inventory. Exceptions Type Condition System.ArgumentOutOfRangeException capacity is too low. Properties | Improve this Doc View Source AvailableCapacity Gets the current capacity available in this inventory. Declaration public int AvailableCapacity { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Capacity Gets the current capacity of this inventory. Declaration public int Capacity { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Items Gets all items currently added to the inventory. Declaration public ICollection<IItem> Items { get; } Property Value Type Description System.Collections.Generic.ICollection < IItem > | Improve this Doc View Source RuntimeId Gets the non persistant identifier of this inventory that should ONLY be used for communication in runtime and during the lifetime of this inventory. Declaration public Guid RuntimeId { get; } Property Value Type Description System.Guid | Improve this Doc View Source UsedCapacity Gets the accumulated weight of all items currently in this inventory. Declaration public int UsedCapacity { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CanBeInserted(IItem) Determines if the item could be added to the inventory. Capacity and filter is checked. Declaration public bool CanBeInserted(IItem item) Parameters Type Name Description IItem item Item that should be checked. Returns Type Description System.Boolean true if item can be added, false otherwise. Exceptions Type Condition System.ArgumentNullException item is null. | Improve this Doc View Source DoesItemFit(IItem) Determines if the given item would fit into this inventory. Declaration public bool DoesItemFit(IItem item) Parameters Type Name Description IItem item Item that should be checked. Returns Type Description System.Boolean true if capacity is available, false otherwise. Exceptions Type Condition System.ArgumentNullException item is null. | Improve this Doc View Source DoesItemFit(ItemMeta, Int32) Determines if the given meta can be added amount of times into this inventory. Declaration public bool DoesItemFit(ItemMeta meta, int amount = 1) Parameters Type Name Description ItemMeta meta Item information to get the single weight from. System.Int32 amount Multiplication of weight received from meta . Returns Type Description System.Boolean true if the item would fit, false otherwise. Exceptions Type Condition System.ArgumentNullException meta is null. System.ArgumentOutOfRangeException amount is 0 or lower. | Improve this Doc View Source DoesItemFit(String, Int32) Determines if the given handle can be inserted amount of times into this inventory. Declaration public bool DoesItemFit(string handle, int amount = 1) Parameters Type Name Description System.String handle ItemMeta identifier to search for. System.Int32 amount Multiplication of weight received from handle . Returns Type Description System.Boolean true if the handle can be added these amount of times. Exceptions Type Condition ItemMetaNotFoundException handle is unknown. System.ArgumentOutOfRangeException amount is lower than 1. | Improve this Doc View Source GetInsertableItems(IInventory, Boolean, Boolean, Boolean) Returns a list of items of this inventory which could be inserted into the targetInventory . The used filters can be specified. Declaration public ICollection<IItem> GetInsertableItems(IInventory targetInventory, bool checkCapacity, bool checkFilter, bool checkMovable) Parameters Type Name Description IInventory targetInventory IInventory to check items to merge into. System.Boolean checkCapacity true if unavailable capacity removes item from possible items, false otherwise. System.Boolean checkFilter true if false inventory item filter result removes item from possible items, false otherwise. System.Boolean checkMovable true if unmovable items should be excluded from possible items, false otherwise. Returns Type Description System.Collections.Generic.ICollection < IItem > List of items that fit the created criteria. Exceptions Type Condition System.ArgumentNullException targetInventory is null. | Improve this Doc View Source GetItem(Guid) Returns the single item that matches the given runtimeId. Declaration public IItem GetItem(Guid runtimeId) Parameters Type Name Description System.Guid runtimeId Unique runtimeId to search for. Returns Type Description IItem The item that has been found, null otherwise. | Improve this Doc View Source GetItem<T>(Guid) Returns the single item that matches the given runtimeId as the provided type T . Declaration public T GetItem<T>(Guid runtimeId) where T : class, IItem Parameters Type Name Description System.Guid runtimeId Unique runtimeId to search for. Returns Type Description T The item that has been found, null otherwise. Type Parameters Name Description T Returned type of this item. | Improve this Doc View Source GetItemFitAmount(IItem) Returns an amount of items that could be inserted into this inventory of the given item . This calculation is based on the available capacity of this inventory. If this item is already in this inventory, this will calculate additional items. Declaration public int GetItemFitAmount(IItem item) Parameters Type Name Description IItem item Item to take the IItem singleweight from. Returns Type Description System.Int32 Amount of additional items that would be able to insert. Exceptions Type Condition System.ArgumentNullException item is null. | Improve this Doc View Source GetItemFitAmount(ItemMeta) Returns an amount of items that could be inserted into this inventory of the given meta . Declaration public int GetItemFitAmount(ItemMeta meta) Parameters Type Name Description ItemMeta meta ItemMeta to calculate the amount from. Returns Type Description System.Int32 Amount of items that would be able to insert. Exceptions Type Condition System.ArgumentNullException meta is null. | Improve this Doc View Source GetItemFitAmount(Int32) Returns an amount of items that could be inserted based on the given itemWeight . Declaration public int GetItemFitAmount(int itemWeight) Parameters Type Name Description System.Int32 itemWeight Single weight to use as calculation base. Returns Type Description System.Int32 Amount of additional items that would be able to insert. Exceptions Type Condition System.ArgumentOutOfRangeException itemWeight is 0 or lower. | Improve this Doc View Source GetItemFitAmount(String) Returns an amount of items that could be inserted into this inventory of the given handle . Declaration public int GetItemFitAmount(string handle) Parameters Type Name Description System.String handle ItemMeta handle to search for. Returns Type Description System.Int32 Amount of items that would be able to insert. Exceptions Type Condition System.ArgumentNullException handle is null, empty or whitespace. ItemMetaNotFoundException handle could not be found. | Improve this Doc View Source GetItems(String) Returns all items in this inventory that have the given handle . Declaration public ICollection<IItem> GetItems(string handle) Parameters Type Name Description System.String handle Handle to search for. Returns Type Description System.Collections.Generic.ICollection < IItem > Found items with the given handle . Exceptions Type Condition System.ArgumentNullException handle is null or whitespace. | Improve this Doc View Source GetItems<T>(String) Returns a list of all items that are assignable to T . If handle is not empty, it has to match handle too. Declaration public ICollection<T> GetItems<T>(string handle = null) where T : IItem Parameters Type Name Description System.String handle Restriction of items to only include items with specified handle. Returns Type Description System.Collections.Generic.ICollection <T> List of items that matched the given criteria. Type Parameters Name Description T Parent type of the items that should be included. | Improve this Doc View Source InsertItem(IItem, Boolean) Tries to insert the given item into this inventory. If the given item is already in any other inventory, it will be removed from the old one first. If an item, that is ready to be merged with the given item exists in this inventory, it will be merged into the first existing item and the given item will be disposed. Declaration public bool InsertItem(IItem item, bool force) Parameters Type Name Description IItem item The item that should be added. System.Boolean force true if checks regarding capacity and filter should be ignored. Returns Type Description System.Boolean true if the item has been added or merged, false otherwise. Exceptions Type Condition System.ArgumentNullException item is null. InventoryCapacityException Adding the item would exceed the current inventory capacity. | Improve this Doc View Source IsItemAllowed(IItem) Determines if the given item is allowed in inventory. Declaration public bool IsItemAllowed(IItem item) Parameters Type Name Description IItem item Item that should be checked. Returns Type Description System.Boolean true if item is allwed, false otherwise. Exceptions Type Condition System.ArgumentNullException item is null. | Improve this Doc View Source OnPropertyChanged(String) Invocator for the interface System.ComponentModel.INotifyPropertyChanged . Declaration [NotifyPropertyChangedInvocator] protected virtual void OnPropertyChanged(string propertyName = null) Parameters Type Name Description System.String propertyName Name of the property that called this method. | Improve this Doc View Source RemoveItem(IItem) Tries to remove the given item item from this inventory. Declaration public bool RemoveItem([NotNull] IItem item) Parameters Type Name Description IItem item Item to remove. Returns Type Description System.Boolean true if the given item was found and successfully removed, false otherwise. Exceptions Type Condition System.ArgumentNullException item is null. | Improve this Doc View Source SetCapacity(Int32) Sets the capacity of this inventory to the given newCapacity . Declaration public bool SetCapacity(int newCapacity) Parameters Type Name Description System.Int32 newCapacity New capacity to set the inventory to. Returns Type Description System.Boolean true if the usedcapacity was below or equal newCapacity and has been changed successfully, false otherwise. Exceptions Type Condition System.ArgumentOutOfRangeException newCapacity was too low. | Improve this Doc View Source SetItemFilter(InventoryDelegates.ItemFilterDelegate) Sets the filter of this inventory to only accept certain items into inventory. To remove the current filter and allow all items again, set the filter to null. Declaration public void SetItemFilter(InventoryDelegates.ItemFilterDelegate filter) Parameters Type Name Description InventoryDelegates.ItemFilterDelegate filter Filter to set to. Events | Improve this Doc View Source PropertyChanged Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description System.ComponentModel.PropertyChangedEventHandler Implements IInventory System.ComponentModel.INotifyPropertyChanged"
  },
  "api/Micky5991.Inventory.Entities.Item.ActionableItem-2.html": {
    "href": "api/Micky5991.Inventory.Entities.Item.ActionableItem-2.html",
    "title": "Class ActionableItem<TOut, TIn>",
    "keywords": "Class ActionableItem<TOut, TIn> Item that is able to hold actions to interact with. Inheritance System.Object Item ActionableItem<TOut, TIn> Implements IActionableItem <TOut, TIn> IItem System.ComponentModel.INotifyPropertyChanged Inherited Members Item.ItemSplitStrategyHandler Item.ItemMergeStrategyHandler Item.Initialize() Item.SetCurrentInventory(IInventory) Item.SetAmount(Int32) Item.IncreaseAmount(Int32) Item.ReduceAmount(Int32) Item.SetSingleWeight(Int32) Item.SetDisplayName(String) Item.CanMergeWith(IItem) Item.MergeItem(IItem) Item.SplitItem(Int32) Item.SetupStrategies() Item.Initialized Item.Handle Item.RuntimeId Item.Meta Item.DefaultDisplayName Item.DisplayName Item.Amount Item.SingleWeight Item.TotalWeight Item.Stackable Item.WeightChangable Item.CurrentInventory Item.MovingLocked Item.Locked Item.PropertyChanged Item.OnPropertyChanged(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory.Entities.Item Assembly : Micky5991.Inventory.dll Syntax public abstract class ActionableItem<TOut, TIn> : Item, IActionableItem<TOut, TIn>, IItem, INotifyPropertyChanged where TOut : OutgoingItemActionData where TIn : IncomingItemActionData Type Parameters Name Description TOut Outgoing data type for item actions. TIn Incoming data type for item action execution. Constructors | Improve this Doc View Source ActionableItem(ItemMeta, AggregatedItemServices) Initializes a new instance of the ActionableItem<TOut, TIn> class. Declaration protected ActionableItem(ItemMeta meta, AggregatedItemServices itemServices) Parameters Type Name Description ItemMeta meta Non-NULL instance of the ItemMeta that is represented by this instance. AggregatedItemServices itemServices Non-NULL instance of AggregatedItemServices which are necessary for this Item . Methods | Improve this Doc View Source ExecuteAction(Object, TIn) Executes a certain action with given data . Declaration public void ExecuteAction(object executor, TIn data) Parameters Type Name Description System.Object executor Instance that executed this action. TIn data Data that should be passed to the action. | Improve this Doc View Source GetAllActionData(Object) Collects all data from all items and returns a list of data from all actions. Declaration public ICollection<TOut> GetAllActionData(object receiver) Parameters Type Name Description System.Object receiver Instance for which this collection should be returned for. Like a user that will receive this data. Returns Type Description System.Collections.Generic.ICollection <TOut> Collection of action data of all actions in this container. | Improve this Doc View Source RegisterAllActions() Method that is used to register all available item actions. Declaration protected abstract IEnumerable<IItemAction<TOut, TIn>> RegisterAllActions() Returns Type Description System.Collections.Generic.IEnumerable < IItemAction <TOut, TIn>> List of item actions that are available in this item. | Improve this Doc View Source SetupItem() Method that initializes actual item data and settings before first usage. Declaration protected override void SetupItem() Overrides Item.SetupItem() Implements IActionableItem<TOut, TIn> IItem System.ComponentModel.INotifyPropertyChanged"
  },
  "api/Micky5991.Inventory.Entities.Item.html": {
    "href": "api/Micky5991.Inventory.Entities.Item.html",
    "title": "Namespace Micky5991.Inventory.Entities.Item",
    "keywords": "Namespace Micky5991.Inventory.Entities.Item Classes ActionableItem<TOut, TIn> Item that is able to hold actions to interact with. Item An item is some type of stack which can be contained inside an IInventory ."
  },
  "api/Micky5991.Inventory.Entities.Item.Item.html": {
    "href": "api/Micky5991.Inventory.Entities.Item.Item.html",
    "title": "Class Item",
    "keywords": "Class Item An item is some type of stack which can be contained inside an IInventory . Inheritance System.Object Item ActionableItem<TOut, TIn> Implements IItem System.ComponentModel.INotifyPropertyChanged Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory.Entities.Item Assembly : Micky5991.Inventory.dll Syntax public abstract class Item : IItem, INotifyPropertyChanged Constructors | Improve this Doc View Source Item(ItemMeta, AggregatedItemServices) Initializes a new instance of the Item class. Declaration protected Item(ItemMeta meta, AggregatedItemServices itemServices) Parameters Type Name Description ItemMeta meta Non-NULL instance of the ItemMeta that is represented by this instance. AggregatedItemServices itemServices Non-NULL instance of AggregatedItemServices which are necessary for this Item . Properties | Improve this Doc View Source Amount Gets the positive amount of items which are represented by this instance. Declaration public int Amount { get; } Property Value Type Description System.Int32 See Also SetAmount ( System.Int32 ) | Improve this Doc View Source CurrentInventory Gets current reference to the IInventory where this item is contained in. Null is equal, that this item is currently in no IInventory . Declaration public IInventory CurrentInventory { get; } Property Value Type Description IInventory | Improve this Doc View Source DefaultDisplayName Gets the original name of the item given by ItemMeta . This name can be used to reset the current display name back to its original state. Declaration public string DefaultDisplayName { get; } Property Value Type Description System.String | Improve this Doc View Source DisplayName Gets the changable display name of this item. Declaration public string DisplayName { get; } Property Value Type Description System.String See Also SetDisplayName ( System.String ) | Improve this Doc View Source Handle Gets an unique handle that identifies the items meta definition. Declaration public string Handle { get; } Property Value Type Description System.String | Improve this Doc View Source ItemMergeStrategyHandler Gets the handler that governs the behavior how other items are merged into this. Declaration protected IItemMergeStrategyHandler ItemMergeStrategyHandler { get; } Property Value Type Description IItemMergeStrategyHandler | Improve this Doc View Source ItemSplitStrategyHandler Gets the handler that governs the behavior how the item splits itself. Declaration protected IItemSplitStrategyHandler ItemSplitStrategyHandler { get; } Property Value Type Description IItemSplitStrategyHandler | Improve this Doc View Source Locked Gets or sets a value indicating whether specifies any action on this item is locked. Declaration public bool Locked { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Meta Gets the underlying meta definition of this item, this is not changable after first initialization if IItemRegistry . Declaration public ItemMeta Meta { get; } Property Value Type Description ItemMeta | Improve this Doc View Source MovingLocked Gets or sets a value indicating whether the item could be moved in any way. If Locked is true, this will be true nonetheless. Declaration public bool MovingLocked { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source RuntimeId Gets a non persistant identifier of this item that should ONLY be used for communication in runtime and during the lifetime of this item. Declaration public Guid RuntimeId { get; } Property Value Type Description System.Guid | Improve this Doc View Source SingleWeight Gets weight of one item in this instance of items. Declaration public int SingleWeight { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Stackable Gets a value indicating whether this item is stackable or not. Typical characteristic of non-stackable items is the fixed Amount of 1. Declaration public bool Stackable { get; } Property Value Type Description System.Boolean | Improve this Doc View Source TotalWeight Gets the total weight of this item instance. Depends on SingleWeight and Amount . Declaration public int TotalWeight { get; } Property Value Type Description System.Int32 See Also SingleWeight Amount | Improve this Doc View Source WeightChangable Gets a value indicating whether the weight of this item is changable or not. Typical characteristic of weight-changable items is that calculations with this item type without the actual item tend to be inaccurate. Declaration public bool WeightChangable { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CanMergeWith(IItem) Determines if the current item can be merged with the sourceItem . Declaration public bool CanMergeWith(IItem sourceItem) Parameters Type Name Description IItem sourceItem Item to check if merging would work with the current item. Returns Type Description System.Boolean true if the merge process would succeed and is different from the current instance, false otherwise. Exceptions Type Condition System.ArgumentNullException sourceItem is null. See Also MergeItem ( IItem ) | Improve this Doc View Source IncreaseAmount(Int32) Increases the total Amount by amountIncrease . Declaration public void IncreaseAmount(int amountIncrease) Parameters Type Name Description System.Int32 amountIncrease Value to increase the total Amount by. Exceptions Type Condition System.ArgumentOutOfRangeException amountIncrease is 0 or lower. ItemNotStackableException amountIncrease is too high for a non-stackable item. | Improve this Doc View Source Initialize() Setups the item right after its creation for any handling that is not possible in a virtual constructor. Declaration public void Initialize() | Improve this Doc View Source MergeItem(IItem) Actual implementation of the item merging process. This merges the source item onto the current instance, so the given sourceItem will be disposed. Declaration public void MergeItem(IItem sourceItem) Parameters Type Name Description IItem sourceItem Item to merge into this. Exceptions Type Condition System.ArgumentNullException sourceItem is null. System.ArgumentException sourceItem is already this instance, sourceItem is not mergable with this item. See Also CanMergeWith ( IItem ) | Improve this Doc View Source OnPropertyChanged(String) Invocator for the interface System.ComponentModel.INotifyPropertyChanged . Declaration [NotifyPropertyChangedInvocator] protected virtual void OnPropertyChanged(string propertyName = null) Parameters Type Name Description System.String propertyName Name of the property that called this method. | Improve this Doc View Source ReduceAmount(Int32) Reduces the total Amount by amountReduce . Declaration public void ReduceAmount(int amountReduce) Parameters Type Name Description System.Int32 amountReduce Value tu reduce the total Amount by. Exceptions Type Condition System.ArgumentOutOfRangeException amountReduce is higher than Amount or 0 or lower. | Improve this Doc View Source SetAmount(Int32) Updates the current count of items in this instance to the specified newAmount . This will change TotalWeight . Declaration public void SetAmount(int newAmount) Parameters Type Name Description System.Int32 newAmount Updated amount of items this stack should represent. Exceptions Type Condition System.ArgumentOutOfRangeException newAmount is too low. ItemNotStackableException newAmount is too high for a non-stackable item. See Also TotalWeight | Improve this Doc View Source SetCurrentInventory(IInventory) /!\\ INTERNAL /! This methods updates the value of CurrentInventory to the current inventory. Use IInventory to set the item to the correct instance. Declaration public void SetCurrentInventory(IInventory inventory) Parameters Type Name Description IInventory inventory Value to set the property CurrentInventory to. | Improve this Doc View Source SetDisplayName(String) Sets the current displayname of this item to the given displayName . This method updates DisplayName . Declaration public void SetDisplayName(string newName) Parameters Type Name Description System.String newName Exceptions Type Condition System.ArgumentNullException displayName is null, empty or whitespace. See Also DefaultDisplayName | Improve this Doc View Source SetSingleWeight(Int32) Sets the single amount weight of this item. Declaration public void SetSingleWeight(int weight) Parameters Type Name Description System.Int32 weight New value to set this item to. Exceptions Type Condition System.ArgumentOutOfRangeException weight is 0 or lower. | Improve this Doc View Source SetupItem() Method that initializes actual item data and settings before first usage. Declaration protected virtual void SetupItem() | Improve this Doc View Source SetupStrategies() Initializer to setup ItemMergeStrategyHandler . Declaration protected virtual void SetupStrategies() | Improve this Doc View Source SplitItem(Int32) Splits the current item into two items and returns the created one. The current amount of this item will be deducted by targetAmount . To specify how to split the item, a IItemSplitStrategy can be specified in Initialize() . Declaration public IItem SplitItem(int targetAmount) Parameters Type Name Description System.Int32 targetAmount Amount of created item. Returns Type Description IItem Newly created item. Exceptions Type Condition System.ArgumentOutOfRangeException targetAmount is 0 or lower or equal or higher than Amount . Events | Improve this Doc View Source Initialized Event that triggers after item has been initialized for the first time. Declaration public event EventHandler<ItemInitializedEventArgs> Initialized Event Type Type Description System.EventHandler < ItemInitializedEventArgs > | Improve this Doc View Source PropertyChanged Declaration public event PropertyChangedEventHandler PropertyChanged Event Type Type Description System.ComponentModel.PropertyChangedEventHandler Implements IItem System.ComponentModel.INotifyPropertyChanged"
  },
  "api/Micky5991.Inventory.Entities.Strategies.BasicItemMergeStrategy.html": {
    "href": "api/Micky5991.Inventory.Entities.Strategies.BasicItemMergeStrategy.html",
    "title": "Class BasicItemMergeStrategy",
    "keywords": "Class BasicItemMergeStrategy Strategy that defines certain behavior of the merging process of two IItem instances. Inheritance System.Object BasicItemMergeStrategy Implements IItemMergeStrategy IStrategy Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory.Entities.Strategies Assembly : Micky5991.Inventory.dll Syntax public class BasicItemMergeStrategy : IItemMergeStrategy, IStrategy Methods | Improve this Doc View Source CanBeMerged(IItem, IItem) Returns if the two given IItem instances can be merged or not. Declaration public bool CanBeMerged(IItem targetItem, IItem sourceItem) Parameters Type Name Description IItem targetItem Instance of IItem that should merge sourceItem into itself. IItem sourceItem Instance of IItem that privides any needed data. Returns Type Description System.Boolean true if those given items can be merged. | Improve this Doc View Source MergeItemWith(IItem, IItem) Executes the actual merge process of sourceItem into targetItem . Declaration public void MergeItemWith(IItem targetItem, IItem sourceItem) Parameters Type Name Description IItem targetItem Instance of IItem that should merge sourceItem into itself. IItem sourceItem Instance of IItem that privides any needed data. Implements IItemMergeStrategy IStrategy"
  },
  "api/Micky5991.Inventory.Entities.Strategies.html": {
    "href": "api/Micky5991.Inventory.Entities.Strategies.html",
    "title": "Namespace Micky5991.Inventory.Entities.Strategies",
    "keywords": "Namespace Micky5991.Inventory.Entities.Strategies Classes BasicItemMergeStrategy Strategy that defines certain behavior of the merging process of two IItem instances. ItemMergeStrategyHandler Handler that executes created methods on all registered IItemMergeStrategy . ItemSplitStrategyHandler Handler that executes created methods on all registered IItemSplitStrategy . StrategyHandler<T> Handler that executes all added T ."
  },
  "api/Micky5991.Inventory.Entities.Strategies.ItemMergeStrategyHandler.html": {
    "href": "api/Micky5991.Inventory.Entities.Strategies.ItemMergeStrategyHandler.html",
    "title": "Class ItemMergeStrategyHandler",
    "keywords": "Class ItemMergeStrategyHandler Handler that executes created methods on all registered IItemMergeStrategy . Inheritance System.Object System.Collections.Generic.List < IItemMergeStrategy > StrategyHandler < IItemMergeStrategy > ItemMergeStrategyHandler Implements System.Collections.Generic.IList < IItemMergeStrategy > System.Collections.Generic.IReadOnlyList < IItemMergeStrategy > System.Collections.Generic.IReadOnlyCollection < IItemMergeStrategy > System.Collections.IList System.Collections.ICollection IItemMergeStrategyHandler IStrategyHandler < IItemMergeStrategy > System.Collections.Generic.ICollection < IItemMergeStrategy > System.Collections.Generic.IEnumerable < IItemMergeStrategy > System.Collections.IEnumerable IItemMergeStrategy IStrategy Inherited Members StrategyHandler<IItemMergeStrategy>.Add(IItemMergeStrategy) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.AddRange(System.Collections.Generic.IEnumerable<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.AsReadOnly() System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.BinarySearch(Micky5991.Inventory.Interfaces.IItemMergeStrategy) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.BinarySearch(Micky5991.Inventory.Interfaces.IItemMergeStrategy, System.Collections.Generic.IComparer<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.BinarySearch(System.Int32, System.Int32, Micky5991.Inventory.Interfaces.IItemMergeStrategy, System.Collections.Generic.IComparer<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Clear() System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Contains(Micky5991.Inventory.Interfaces.IItemMergeStrategy) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.ConvertAll<TOutput>(System.Converter<Micky5991.Inventory.Interfaces.IItemMergeStrategy, TOutput>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.CopyTo(Micky5991.Inventory.Interfaces.IItemMergeStrategy[]) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.CopyTo(Micky5991.Inventory.Interfaces.IItemMergeStrategy[], System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.CopyTo(System.Int32, Micky5991.Inventory.Interfaces.IItemMergeStrategy[], System.Int32, System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Exists(System.Predicate<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Find(System.Predicate<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.FindAll(System.Predicate<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.FindIndex(System.Int32, System.Int32, System.Predicate<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.FindIndex(System.Int32, System.Predicate<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.FindIndex(System.Predicate<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.FindLast(System.Predicate<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.FindLastIndex(System.Int32, System.Int32, System.Predicate<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.FindLastIndex(System.Int32, System.Predicate<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.FindLastIndex(System.Predicate<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.ForEach(System.Action<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.GetEnumerator() System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.GetRange(System.Int32, System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.IndexOf(Micky5991.Inventory.Interfaces.IItemMergeStrategy) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.IndexOf(Micky5991.Inventory.Interfaces.IItemMergeStrategy, System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.IndexOf(Micky5991.Inventory.Interfaces.IItemMergeStrategy, System.Int32, System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Insert(System.Int32, Micky5991.Inventory.Interfaces.IItemMergeStrategy) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.LastIndexOf(Micky5991.Inventory.Interfaces.IItemMergeStrategy) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.LastIndexOf(Micky5991.Inventory.Interfaces.IItemMergeStrategy, System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.LastIndexOf(Micky5991.Inventory.Interfaces.IItemMergeStrategy, System.Int32, System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Remove(Micky5991.Inventory.Interfaces.IItemMergeStrategy) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.RemoveAll(System.Predicate<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.RemoveAt(System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.RemoveRange(System.Int32, System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Reverse() System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Reverse(System.Int32, System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Sort() System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Sort(System.Collections.Generic.IComparer<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Sort(System.Comparison<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.System.Collections.Generic.IEnumerable<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.GetEnumerator() System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.System.Collections.IEnumerable.GetEnumerator() System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.System.Collections.IList.Add(System.Object) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.System.Collections.IList.Contains(System.Object) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.System.Collections.IList.IndexOf(System.Object) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.System.Collections.IList.Remove(System.Object) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.ToArray() System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.TrimExcess() System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.TrueForAll(System.Predicate<Micky5991.Inventory.Interfaces.IItemMergeStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Capacity System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Count System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Item[System.Int32] System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.System.Collections.Generic.ICollection<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.IsReadOnly System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.System.Collections.ICollection.IsSynchronized System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.System.Collections.ICollection.SyncRoot System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.System.Collections.IList.IsFixedSize System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.System.Collections.IList.IsReadOnly System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.System.Collections.IList.Item[System.Int32] System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory.Entities.Strategies Assembly : Micky5991.Inventory.dll Syntax public class ItemMergeStrategyHandler : StrategyHandler<IItemMergeStrategy>, IList<IItemMergeStrategy>, IReadOnlyList<IItemMergeStrategy>, IReadOnlyCollection<IItemMergeStrategy>, IList, ICollection, IItemMergeStrategyHandler, IStrategyHandler<IItemMergeStrategy>, ICollection<IItemMergeStrategy>, IEnumerable<IItemMergeStrategy>, IEnumerable, IItemMergeStrategy, IStrategy Methods | Improve this Doc View Source CanBeMerged(IItem, IItem) Returns if the two given IItem instances can be merged or not. Declaration public bool CanBeMerged(IItem targetItem, IItem sourceItem) Parameters Type Name Description IItem targetItem Instance of IItem that should merge sourceItem into itself. IItem sourceItem Instance of IItem that privides any needed data. Returns Type Description System.Boolean true if those given items can be merged. | Improve this Doc View Source MergeItemWith(IItem, IItem) Executes the actual merge process of sourceItem into targetItem . Declaration public void MergeItemWith(IItem targetItem, IItem sourceItem) Parameters Type Name Description IItem targetItem Instance of IItem that should merge sourceItem into itself. IItem sourceItem Instance of IItem that privides any needed data. Implements System.Collections.Generic.IList<T> System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.IList System.Collections.ICollection IItemMergeStrategyHandler IStrategyHandler<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IItemMergeStrategy IStrategy"
  },
  "api/Micky5991.Inventory.Entities.Strategies.ItemSplitStrategyHandler.html": {
    "href": "api/Micky5991.Inventory.Entities.Strategies.ItemSplitStrategyHandler.html",
    "title": "Class ItemSplitStrategyHandler",
    "keywords": "Class ItemSplitStrategyHandler Handler that executes created methods on all registered IItemSplitStrategy . Inheritance System.Object System.Collections.Generic.List < IItemSplitStrategy > StrategyHandler < IItemSplitStrategy > ItemSplitStrategyHandler Implements System.Collections.Generic.IList < IItemSplitStrategy > System.Collections.Generic.IReadOnlyList < IItemSplitStrategy > System.Collections.Generic.IReadOnlyCollection < IItemSplitStrategy > System.Collections.IList System.Collections.ICollection IItemSplitStrategyHandler IStrategyHandler < IItemSplitStrategy > System.Collections.Generic.ICollection < IItemSplitStrategy > System.Collections.Generic.IEnumerable < IItemSplitStrategy > System.Collections.IEnumerable IItemSplitStrategy IStrategy Inherited Members StrategyHandler<IItemSplitStrategy>.Add(IItemSplitStrategy) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.AddRange(System.Collections.Generic.IEnumerable<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.AsReadOnly() System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.BinarySearch(Micky5991.Inventory.Interfaces.IItemSplitStrategy) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.BinarySearch(Micky5991.Inventory.Interfaces.IItemSplitStrategy, System.Collections.Generic.IComparer<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.BinarySearch(System.Int32, System.Int32, Micky5991.Inventory.Interfaces.IItemSplitStrategy, System.Collections.Generic.IComparer<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Clear() System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Contains(Micky5991.Inventory.Interfaces.IItemSplitStrategy) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.ConvertAll<TOutput>(System.Converter<Micky5991.Inventory.Interfaces.IItemSplitStrategy, TOutput>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.CopyTo(Micky5991.Inventory.Interfaces.IItemSplitStrategy[]) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.CopyTo(Micky5991.Inventory.Interfaces.IItemSplitStrategy[], System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.CopyTo(System.Int32, Micky5991.Inventory.Interfaces.IItemSplitStrategy[], System.Int32, System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Exists(System.Predicate<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Find(System.Predicate<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.FindAll(System.Predicate<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.FindIndex(System.Int32, System.Int32, System.Predicate<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.FindIndex(System.Int32, System.Predicate<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.FindIndex(System.Predicate<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.FindLast(System.Predicate<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.FindLastIndex(System.Int32, System.Int32, System.Predicate<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.FindLastIndex(System.Int32, System.Predicate<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.FindLastIndex(System.Predicate<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.ForEach(System.Action<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.GetEnumerator() System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.GetRange(System.Int32, System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.IndexOf(Micky5991.Inventory.Interfaces.IItemSplitStrategy) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.IndexOf(Micky5991.Inventory.Interfaces.IItemSplitStrategy, System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.IndexOf(Micky5991.Inventory.Interfaces.IItemSplitStrategy, System.Int32, System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Insert(System.Int32, Micky5991.Inventory.Interfaces.IItemSplitStrategy) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.LastIndexOf(Micky5991.Inventory.Interfaces.IItemSplitStrategy) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.LastIndexOf(Micky5991.Inventory.Interfaces.IItemSplitStrategy, System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.LastIndexOf(Micky5991.Inventory.Interfaces.IItemSplitStrategy, System.Int32, System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Remove(Micky5991.Inventory.Interfaces.IItemSplitStrategy) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.RemoveAll(System.Predicate<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.RemoveAt(System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.RemoveRange(System.Int32, System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Reverse() System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Reverse(System.Int32, System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Sort() System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Sort(System.Collections.Generic.IComparer<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Sort(System.Comparison<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.System.Collections.Generic.IEnumerable<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.GetEnumerator() System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.System.Collections.IEnumerable.GetEnumerator() System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.System.Collections.IList.Add(System.Object) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.System.Collections.IList.Contains(System.Object) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.System.Collections.IList.IndexOf(System.Object) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.System.Collections.IList.Remove(System.Object) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.ToArray() System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.TrimExcess() System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.TrueForAll(System.Predicate<Micky5991.Inventory.Interfaces.IItemSplitStrategy>) System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Capacity System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Count System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Item[System.Int32] System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.System.Collections.Generic.ICollection<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.IsReadOnly System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.System.Collections.ICollection.IsSynchronized System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.System.Collections.ICollection.SyncRoot System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.System.Collections.IList.IsFixedSize System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.System.Collections.IList.IsReadOnly System.Collections.Generic.List<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.System.Collections.IList.Item[System.Int32] System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory.Entities.Strategies Assembly : Micky5991.Inventory.dll Syntax public class ItemSplitStrategyHandler : StrategyHandler<IItemSplitStrategy>, IList<IItemSplitStrategy>, IReadOnlyList<IItemSplitStrategy>, IReadOnlyCollection<IItemSplitStrategy>, IList, ICollection, IItemSplitStrategyHandler, IStrategyHandler<IItemSplitStrategy>, ICollection<IItemSplitStrategy>, IEnumerable<IItemSplitStrategy>, IEnumerable, IItemSplitStrategy, IStrategy Methods | Improve this Doc View Source SplitItem(IItem, IItem) Executes a split from oldItem into the item newItem . Declaration public void SplitItem(IItem oldItem, IItem newItem) Parameters Type Name Description IItem oldItem Instance of IItem to extract the data from. IItem newItem Instance of IItem to apply the splitted data to. Implements System.Collections.Generic.IList<T> System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.IList System.Collections.ICollection IItemSplitStrategyHandler IStrategyHandler<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IItemSplitStrategy IStrategy"
  },
  "api/Micky5991.Inventory.Entities.Strategies.StrategyHandler-1.html": {
    "href": "api/Micky5991.Inventory.Entities.Strategies.StrategyHandler-1.html",
    "title": "Class StrategyHandler<T>",
    "keywords": "Class StrategyHandler<T> Handler that executes all added T . Inheritance System.Object System.Collections.Generic.List <T> StrategyHandler<T> ItemMergeStrategyHandler ItemSplitStrategyHandler Implements System.Collections.Generic.IList <T> System.Collections.Generic.IReadOnlyList <T> System.Collections.Generic.IReadOnlyCollection <T> System.Collections.IList System.Collections.ICollection IStrategyHandler <T> System.Collections.Generic.ICollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable Inherited Members System.Collections.Generic.List<T>.System.Collections.IList.get_Item(System.Int32) System.Collections.Generic.List<T>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>) System.Collections.Generic.List<T>.AsReadOnly() System.Collections.Generic.List<T>.BinarySearch(T) System.Collections.Generic.List<T>.BinarySearch(T, System.Collections.Generic.IComparer<T>) System.Collections.Generic.List<T>.BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>) System.Collections.Generic.List<T>.Clear() System.Collections.Generic.List<T>.Contains(T) System.Collections.Generic.List<T>.ConvertAll<TOutput>(System.Converter<T, TOutput>) System.Collections.Generic.List<T>.CopyTo(T[]) System.Collections.Generic.List<T>.CopyTo(T[], System.Int32) System.Collections.Generic.List<T>.CopyTo(System.Int32, T[], System.Int32, System.Int32) System.Collections.Generic.List<T>.Exists(System.Predicate<T>) System.Collections.Generic.List<T>.Find(System.Predicate<T>) System.Collections.Generic.List<T>.FindAll(System.Predicate<T>) System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Int32, System.Predicate<T>) System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Predicate<T>) System.Collections.Generic.List<T>.FindIndex(System.Predicate<T>) System.Collections.Generic.List<T>.FindLast(System.Predicate<T>) System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Int32, System.Predicate<T>) System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Predicate<T>) System.Collections.Generic.List<T>.FindLastIndex(System.Predicate<T>) System.Collections.Generic.List<T>.ForEach(System.Action<T>) System.Collections.Generic.List<T>.GetEnumerator() System.Collections.Generic.List<T>.GetRange(System.Int32, System.Int32) System.Collections.Generic.List<T>.IndexOf(T) System.Collections.Generic.List<T>.IndexOf(T, System.Int32) System.Collections.Generic.List<T>.IndexOf(T, System.Int32, System.Int32) System.Collections.Generic.List<T>.Insert(System.Int32, T) System.Collections.Generic.List<T>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>) System.Collections.Generic.List<T>.LastIndexOf(T) System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32) System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32, System.Int32) System.Collections.Generic.List<T>.Remove(T) System.Collections.Generic.List<T>.RemoveAll(System.Predicate<T>) System.Collections.Generic.List<T>.RemoveAt(System.Int32) System.Collections.Generic.List<T>.RemoveRange(System.Int32, System.Int32) System.Collections.Generic.List<T>.Reverse() System.Collections.Generic.List<T>.Reverse(System.Int32, System.Int32) System.Collections.Generic.List<T>.Sort() System.Collections.Generic.List<T>.Sort(System.Collections.Generic.IComparer<T>) System.Collections.Generic.List<T>.Sort(System.Comparison<T>) System.Collections.Generic.List<T>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>) System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator() System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator() System.Collections.Generic.List<T>.System.Collections.IList.Add(System.Object) System.Collections.Generic.List<T>.System.Collections.IList.Contains(System.Object) System.Collections.Generic.List<T>.System.Collections.IList.IndexOf(System.Object) System.Collections.Generic.List<T>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.Generic.List<T>.System.Collections.IList.Remove(System.Object) System.Collections.Generic.List<T>.ToArray() System.Collections.Generic.List<T>.TrimExcess() System.Collections.Generic.List<T>.TrueForAll(System.Predicate<T>) System.Collections.Generic.List<T>.Capacity System.Collections.Generic.List<T>.Count System.Collections.Generic.List<T>.Item[System.Int32] System.Collections.Generic.List<T>.System.Collections.Generic.ICollection<T>.IsReadOnly System.Collections.Generic.List<T>.System.Collections.ICollection.IsSynchronized System.Collections.Generic.List<T>.System.Collections.ICollection.SyncRoot System.Collections.Generic.List<T>.System.Collections.IList.IsFixedSize System.Collections.Generic.List<T>.System.Collections.IList.IsReadOnly System.Collections.Generic.List<T>.System.Collections.IList.Item[System.Int32] System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory.Entities.Strategies Assembly : Micky5991.Inventory.dll Syntax public abstract class StrategyHandler<T> : List<T>, IList<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IList, ICollection, IStrategyHandler<T>, ICollection<T>, IEnumerable<T>, IEnumerable where T : IStrategy Type Parameters Name Description T Implementation of IStrategy that should be handled. Methods | Improve this Doc View Source Add(T) Declaration public void Add(T item) Parameters Type Name Description T item Implements System.Collections.Generic.IList<T> System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.IList System.Collections.ICollection IStrategyHandler<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Micky5991.Inventory.Enums.html": {
    "href": "api/Micky5991.Inventory.Enums.html",
    "title": "Namespace Micky5991.Inventory.Enums",
    "keywords": "Namespace Micky5991.Inventory.Enums Enums ItemFlags Specifies which certain behaviors an item should have."
  },
  "api/Micky5991.Inventory.Enums.ItemFlags.html": {
    "href": "api/Micky5991.Inventory.Enums.ItemFlags.html",
    "title": "Enum ItemFlags",
    "keywords": "Enum ItemFlags Specifies which certain behaviors an item should have. Namespace : Micky5991.Inventory.Enums Assembly : Micky5991.Inventory.dll Syntax [Flags] public enum ItemFlags : uint Fields Name Description None This item has default behavior. NotStackable An item with this flag is not stackable with other items and only has an amount of 1. WeightChangable The weight of this item is changable and weight calculations could be inaccurate before creation."
  },
  "api/Micky5991.Inventory.EventArgs.html": {
    "href": "api/Micky5991.Inventory.EventArgs.html",
    "title": "Namespace Micky5991.Inventory.EventArgs",
    "keywords": "Namespace Micky5991.Inventory.EventArgs Classes ItemInitializedEventArgs Event arguments for the IItem event Initialized."
  },
  "api/Micky5991.Inventory.EventArgs.ItemInitializedEventArgs.html": {
    "href": "api/Micky5991.Inventory.EventArgs.ItemInitializedEventArgs.html",
    "title": "Class ItemInitializedEventArgs",
    "keywords": "Class ItemInitializedEventArgs Event arguments for the IItem event Initialized. Inheritance System.Object ItemInitializedEventArgs Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory.EventArgs Assembly : Micky5991.Inventory.dll Syntax public class ItemInitializedEventArgs Constructors | Improve this Doc View Source ItemInitializedEventArgs(IItem) Initializes a new instance of the ItemInitializedEventArgs class. Declaration public ItemInitializedEventArgs(IItem item) Parameters Type Name Description IItem item Instance of IItem that has been initialized. Properties | Improve this Doc View Source Item Gets the reference to the item that has been initialized. Declaration public IItem Item { get; } Property Value Type Description IItem"
  },
  "api/Micky5991.Inventory.Exceptions.html": {
    "href": "api/Micky5991.Inventory.Exceptions.html",
    "title": "Namespace Micky5991.Inventory.Exceptions",
    "keywords": "Namespace Micky5991.Inventory.Exceptions Classes InvalidActionException Exception expresses that any IItemAction<TOut, TIn> is invalid. InvalidItemRegistryException Exception that expresses a violation of a setup rule of ItemMeta . See the exception message for more details. InventoryCapacityException Exception that expresses that a certain operation would exceed the maximum capacity of an inventory. ItemActionNotFoundException Exception expresses that a certain item action could not be found. ItemMetaNotFoundException Exception expresses that the ItemMeta could not be found. ItemNotAllowedException Exception that expresses that the given item is not allowed in this inventory. ItemNotMovableException Exception that expresses that the item is currently unable to move. ItemNotStackableException Exception that expresses that the Item is not stackable and the operation would infringe this rule."
  },
  "api/Micky5991.Inventory.Exceptions.InvalidActionException.html": {
    "href": "api/Micky5991.Inventory.Exceptions.InvalidActionException.html",
    "title": "Class InvalidActionException",
    "keywords": "Class InvalidActionException Exception expresses that any IItemAction<TOut, TIn> is invalid. Inheritance System.Object System.Exception InvalidActionException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Micky5991.Inventory.Exceptions Assembly : Micky5991.Inventory.dll Syntax public class InvalidActionException : Exception, ISerializable Constructors | Improve this Doc View Source InvalidActionException(String) Initializes a new instance of the InvalidActionException class. Declaration public InvalidActionException(string message) Parameters Type Name Description System.String message Message that explains why the action is invalid. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Micky5991.Inventory.Exceptions.InvalidItemRegistryException.html": {
    "href": "api/Micky5991.Inventory.Exceptions.InvalidItemRegistryException.html",
    "title": "Class InvalidItemRegistryException",
    "keywords": "Class InvalidItemRegistryException Exception that expresses a violation of a setup rule of ItemMeta . See the exception message for more details. Inheritance System.Object System.Exception InvalidItemRegistryException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Micky5991.Inventory.Exceptions Assembly : Micky5991.Inventory.dll Syntax public class InvalidItemRegistryException : Exception, ISerializable Constructors | Improve this Doc View Source InvalidItemRegistryException(String) Initializes a new instance of the InvalidItemRegistryException class. Declaration public InvalidItemRegistryException(string message) Parameters Type Name Description System.String message Message that describes the violation. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Micky5991.Inventory.Exceptions.InventoryCapacityException.html": {
    "href": "api/Micky5991.Inventory.Exceptions.InventoryCapacityException.html",
    "title": "Class InventoryCapacityException",
    "keywords": "Class InventoryCapacityException Exception that expresses that a certain operation would exceed the maximum capacity of an inventory. Inheritance System.Object System.Exception System.SystemException System.ArgumentException InventoryCapacityException Implements System.Runtime.Serialization.ISerializable Inherited Members System.ArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.ArgumentException.Message System.ArgumentException.ParamName System.Exception.GetBaseException() System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Micky5991.Inventory.Exceptions Assembly : Micky5991.Inventory.dll Syntax public class InventoryCapacityException : ArgumentException, ISerializable Constructors | Improve this Doc View Source InventoryCapacityException(String, IItem) Initializes a new instance of the InventoryCapacityException class. Declaration public InventoryCapacityException(string paramName, IItem item) Parameters Type Name Description System.String paramName Name of the parameter that carries the invalid argument. IItem item Instance of the item that would exceed the capacity of an inventory. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Micky5991.Inventory.Exceptions.ItemActionNotFoundException.html": {
    "href": "api/Micky5991.Inventory.Exceptions.ItemActionNotFoundException.html",
    "title": "Class ItemActionNotFoundException",
    "keywords": "Class ItemActionNotFoundException Exception expresses that a certain item action could not be found. Inheritance System.Object System.Exception ItemActionNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Micky5991.Inventory.Exceptions Assembly : Micky5991.Inventory.dll Syntax public class ItemActionNotFoundException : Exception, ISerializable Constructors | Improve this Doc View Source ItemActionNotFoundException(String) Initializes a new instance of the ItemActionNotFoundException class. Declaration public ItemActionNotFoundException(string message) Parameters Type Name Description System.String message Message that describes which action could not be found. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Micky5991.Inventory.Exceptions.ItemMetaNotFoundException.html": {
    "href": "api/Micky5991.Inventory.Exceptions.ItemMetaNotFoundException.html",
    "title": "Class ItemMetaNotFoundException",
    "keywords": "Class ItemMetaNotFoundException Exception expresses that the ItemMeta could not be found. Inheritance System.Object System.Exception ItemMetaNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Micky5991.Inventory.Exceptions Assembly : Micky5991.Inventory.dll Syntax public class ItemMetaNotFoundException : Exception, ISerializable Constructors | Improve this Doc View Source ItemMetaNotFoundException(String) Initializes a new instance of the ItemMetaNotFoundException class. Declaration public ItemMetaNotFoundException(string message) Parameters Type Name Description System.String message Message that describes more details which data was searched for. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Micky5991.Inventory.Exceptions.ItemNotAllowedException.html": {
    "href": "api/Micky5991.Inventory.Exceptions.ItemNotAllowedException.html",
    "title": "Class ItemNotAllowedException",
    "keywords": "Class ItemNotAllowedException Exception that expresses that the given item is not allowed in this inventory. Inheritance System.Object System.Exception ItemNotAllowedException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Micky5991.Inventory.Exceptions Assembly : Micky5991.Inventory.dll Syntax public class ItemNotAllowedException : Exception, ISerializable Constructors | Improve this Doc View Source ItemNotAllowedException() Initializes a new instance of the ItemNotAllowedException class. Declaration public ItemNotAllowedException() Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Micky5991.Inventory.Exceptions.ItemNotMovableException.html": {
    "href": "api/Micky5991.Inventory.Exceptions.ItemNotMovableException.html",
    "title": "Class ItemNotMovableException",
    "keywords": "Class ItemNotMovableException Exception that expresses that the item is currently unable to move. Inheritance System.Object System.Exception ItemNotMovableException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Micky5991.Inventory.Exceptions Assembly : Micky5991.Inventory.dll Syntax public class ItemNotMovableException : Exception, ISerializable Constructors | Improve this Doc View Source ItemNotMovableException(IItem) Initializes a new instance of the ItemNotMovableException class. Declaration public ItemNotMovableException(IItem item) Parameters Type Name Description IItem item Instance of the item which is not movable. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Micky5991.Inventory.Exceptions.ItemNotStackableException.html": {
    "href": "api/Micky5991.Inventory.Exceptions.ItemNotStackableException.html",
    "title": "Class ItemNotStackableException",
    "keywords": "Class ItemNotStackableException Exception that expresses that the Item is not stackable and the operation would infringe this rule. Inheritance System.Object System.Exception ItemNotStackableException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Micky5991.Inventory.Exceptions Assembly : Micky5991.Inventory.dll Syntax public class ItemNotStackableException : Exception, ISerializable Constructors | Improve this Doc View Source ItemNotStackableException() Initializes a new instance of the ItemNotStackableException class. Declaration public ItemNotStackableException() Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Micky5991.Inventory.Extensions.html": {
    "href": "api/Micky5991.Inventory.Extensions.html",
    "title": "Namespace Micky5991.Inventory.Extensions",
    "keywords": "Namespace Micky5991.Inventory.Extensions Classes InventoryDependencyExtensions Extensions which simplify the usage of this library."
  },
  "api/Micky5991.Inventory.Extensions.InventoryDependencyExtensions.html": {
    "href": "api/Micky5991.Inventory.Extensions.InventoryDependencyExtensions.html",
    "title": "Class InventoryDependencyExtensions",
    "keywords": "Class InventoryDependencyExtensions Extensions which simplify the usage of this library. Inheritance System.Object InventoryDependencyExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory.Extensions Assembly : Micky5991.Inventory.dll Syntax public static class InventoryDependencyExtensions Methods | Improve this Doc View Source AddDefaultFactories(IServiceCollection) Registers all default inventory and item factories. Calls the following extensions: AddDefaultInventoryFactory(IServiceCollection) , AddDefaultItemFactory(IServiceCollection) . Declaration public static IServiceCollection AddDefaultFactories(this IServiceCollection serviceCollection) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection Collection to register the services to. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection that has been passed. Exceptions Type Condition System.ArgumentNullException serviceCollection is null. | Improve this Doc View Source AddDefaultInventoryFactory(IServiceCollection) Registers default IInventoryFactory . Registers the following services: InventoryFactory as IInventoryFactory . Declaration public static IServiceCollection AddDefaultInventoryFactory(this IServiceCollection serviceCollection) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection Collection to register the services to. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection that has been passed. Exceptions Type Condition System.ArgumentNullException serviceCollection is null. | Improve this Doc View Source AddDefaultInventoryMergeStrategy(IServiceCollection) Registers the following services: ItemMergeStrategyHandler as IItemMergeStrategyHandler . Declaration public static IServiceCollection AddDefaultInventoryMergeStrategy(this IServiceCollection serviceCollection) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection Collection to register the services to. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection that has been passed. Exceptions Type Condition System.ArgumentNullException serviceCollection is null. | Improve this Doc View Source AddDefaultInventoryServices(IServiceCollection) Registers all default inventory and item services. Calls the following extensions: AddDefaultFactories(IServiceCollection) , AddDefaultInventoryStrategies(IServiceCollection) , AddInventoryServices(IServiceCollection) . Declaration public static IServiceCollection AddDefaultInventoryServices(this IServiceCollection serviceCollection) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection Collection to register the services to. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection that has been passed. Exceptions Type Condition System.ArgumentNullException serviceCollection is null. | Improve this Doc View Source AddDefaultInventorySplitStrategy(IServiceCollection) Registers the following services: ItemSplitStrategyHandler as IItemSplitStrategyHandler . Declaration public static IServiceCollection AddDefaultInventorySplitStrategy(this IServiceCollection serviceCollection) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection Collection to register the services to. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection that has been passed. Exceptions Type Condition System.ArgumentNullException serviceCollection is null. | Improve this Doc View Source AddDefaultInventoryStrategies(IServiceCollection) Registers all default inventory strategies to Microsoft.Extensions.DependencyInjection.IServiceCollection . Calls the following extensions: AddDefaultInventoryMergeStrategy(IServiceCollection) , AddDefaultInventorySplitStrategy(IServiceCollection) . Declaration public static IServiceCollection AddDefaultInventoryStrategies(this IServiceCollection serviceCollection) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection Collection to register the services to. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection that has been passed. Exceptions Type Condition System.ArgumentNullException serviceCollection is null. | Improve this Doc View Source AddDefaultItemFactory(IServiceCollection) Registers default IItemFactory Registers the following services: ItemFactory as IItemFactory . Declaration public static IServiceCollection AddDefaultItemFactory(this IServiceCollection serviceCollection) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection Collection to register the services to. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection that has been passed. Exceptions Type Condition System.ArgumentNullException serviceCollection is null. | Improve this Doc View Source AddInventoryServices(IServiceCollection) Registers all needed core inventory and item services. These services have to be registered regardless of usage. Declaration public static IServiceCollection AddInventoryServices(this IServiceCollection serviceCollection) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection Collection to register the services to. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection that has been passed. Exceptions Type Condition System.ArgumentNullException serviceCollection is null. | Improve this Doc View Source AddItemTypes(IServiceCollection, IItemRegistry) Reads the given itemRegistry and registers all ItemMeta instances to the Microsoft.Extensions.DependencyInjection.IServiceCollection . Declaration public static IServiceCollection AddItemTypes(this IServiceCollection serviceCollection, IItemRegistry itemRegistry) Parameters Type Name Description Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection Microsoft.Extensions.DependencyInjection.IServiceCollection to register all ItemMeta to. IItemRegistry itemRegistry IItemRegistry that will be read. Returns Type Description Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.DependencyInjection.IServiceCollection that was passed by serviceCollection . Exceptions Type Condition System.ArgumentNullException serviceCollection or itemRegistry is null. InvalidItemRegistryException itemRegistry is not valid. See exception for more details."
  },
  "api/Micky5991.Inventory.html": {
    "href": "api/Micky5991.Inventory.html",
    "title": "Namespace Micky5991.Inventory",
    "keywords": "Namespace Micky5991.Inventory Classes BaseItemRegistry Registry of ItemMeta indexed by item handle. InventoryDelegates Collection of available delegates of this project. ItemMeta This type gives basic information about an item without creation. Delegates InventoryDelegates.ActionEnabledDelegate Delegate that checks if the action is enabled. If action is not visible, it is also disabled by default. InventoryDelegates.ActionVisibleDelegate Delegate that checks if this action is visible at all. InventoryDelegates.ItemFilterDelegate Delegate to specify if the given item matches these requirements."
  },
  "api/Micky5991.Inventory.Interfaces.html": {
    "href": "api/Micky5991.Inventory.Interfaces.html",
    "title": "Namespace Micky5991.Inventory.Interfaces",
    "keywords": "Namespace Micky5991.Inventory.Interfaces Interfaces IActionableItem<TOut, TIn> Container that holds all actions and handles incoming and outgoing data transfer. IInventory Container of IItem instances with a finite capacity limit. IInventoryFactory Factory that creates a specific implementation of IInventory . IItem An item is some type of stack which can be contained inside an IInventory . IItemAction<TOut, TIn> Item actions are options which are executable on items. IItemFactory Factory that creates actual implementations for IItem . IItemMergeStrategy Strategy that defines certain behavior of the merging process of two IItem instances. IItemMergeStrategyHandler Handler that executes created methods on all registered IItemMergeStrategy . IItemRegistry Registry of ItemMeta indexed by item handle. IItemSplitStrategy Strategy that specifies the behavior how to split an item into a second one. IItemSplitStrategyHandler Handler that executes created methods on all registered IItemSplitStrategy . IStrategy Base interface of any behavior strategy. This instance can be used for any specific implementation of IStrategyHandler<T> . IStrategyHandler<T> Handler that executes all added T ."
  },
  "api/Micky5991.Inventory.Interfaces.IActionableItem-2.html": {
    "href": "api/Micky5991.Inventory.Interfaces.IActionableItem-2.html",
    "title": "Interface IActionableItem<TOut, TIn>",
    "keywords": "Interface IActionableItem<TOut, TIn> Container that holds all actions and handles incoming and outgoing data transfer. Inherited Members IItem.Initialized IItem.Handle IItem.RuntimeId IItem.Meta IItem.DefaultDisplayName IItem.DisplayName IItem.Amount IItem.SingleWeight IItem.TotalWeight IItem.Stackable IItem.WeightChangable IItem.CurrentInventory IItem.MovingLocked IItem.Locked IItem.Initialize() IItem.SetCurrentInventory(IInventory) IItem.SetAmount(Int32) IItem.IncreaseAmount(Int32) IItem.ReduceAmount(Int32) IItem.SetSingleWeight(Int32) IItem.SetDisplayName(String) IItem.CanMergeWith(IItem) IItem.MergeItem(IItem) IItem.SplitItem(Int32) System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : Micky5991.Inventory.Interfaces Assembly : Micky5991.Inventory.dll Syntax [PublicAPI] public interface IActionableItem<TOut, TIn> : IItem, INotifyPropertyChanged where TOut : OutgoingItemActionData where TIn : IncomingItemActionData Type Parameters Name Description TOut Outgoing data type. TIn Incoming data type. Methods | Improve this Doc View Source ExecuteAction(Object, TIn) Executes a certain action with given data . Declaration void ExecuteAction(object executor, TIn data) Parameters Type Name Description System.Object executor Instance that executed this action. TIn data Data that should be passed to the action. | Improve this Doc View Source GetAllActionData(Object) Collects all data from all items and returns a list of data from all actions. Declaration ICollection<TOut> GetAllActionData(object receiver) Parameters Type Name Description System.Object receiver Instance for which this collection should be returned for. Like a user that will receive this data. Returns Type Description System.Collections.Generic.ICollection <TOut> Collection of action data of all actions in this container."
  },
  "api/Micky5991.Inventory.Interfaces.IInventory.html": {
    "href": "api/Micky5991.Inventory.Interfaces.IInventory.html",
    "title": "Interface IInventory",
    "keywords": "Interface IInventory Container of IItem instances with a finite capacity limit. Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : Micky5991.Inventory.Interfaces Assembly : Micky5991.Inventory.dll Syntax [PublicAPI] public interface IInventory : INotifyPropertyChanged Properties | Improve this Doc View Source AvailableCapacity Gets the current capacity available in this inventory. Declaration int AvailableCapacity { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Capacity Gets the current capacity of this inventory. Declaration int Capacity { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Items Gets all items currently added to the inventory. Declaration ICollection<IItem> Items { get; } Property Value Type Description System.Collections.Generic.ICollection < IItem > | Improve this Doc View Source RuntimeId Gets the non persistant identifier of this inventory that should ONLY be used for communication in runtime and during the lifetime of this inventory. Declaration Guid RuntimeId { get; } Property Value Type Description System.Guid | Improve this Doc View Source UsedCapacity Gets the accumulated weight of all items currently in this inventory. Declaration int UsedCapacity { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source CanBeInserted(IItem) Determines if the item could be added to the inventory. Capacity and filter is checked. Declaration bool CanBeInserted([NotNull] IItem item) Parameters Type Name Description IItem item Item that should be checked. Returns Type Description System.Boolean true if item can be added, false otherwise. Exceptions Type Condition System.ArgumentNullException item is null. | Improve this Doc View Source DoesItemFit(IItem) Determines if the given item would fit into this inventory. Declaration bool DoesItemFit([NotNull] IItem item) Parameters Type Name Description IItem item Item that should be checked. Returns Type Description System.Boolean true if capacity is available, false otherwise. Exceptions Type Condition System.ArgumentNullException item is null. | Improve this Doc View Source DoesItemFit(ItemMeta, Int32) Determines if the given meta can be added amount of times into this inventory. Declaration bool DoesItemFit(ItemMeta meta, int amount = 1) Parameters Type Name Description ItemMeta meta Item information to get the single weight from. System.Int32 amount Multiplication of weight received from meta . Returns Type Description System.Boolean true if the item would fit, false otherwise. Exceptions Type Condition System.ArgumentNullException meta is null. System.ArgumentOutOfRangeException amount is 0 or lower. | Improve this Doc View Source DoesItemFit(String, Int32) Determines if the given handle can be inserted amount of times into this inventory. Declaration bool DoesItemFit(string handle, int amount = 1) Parameters Type Name Description System.String handle ItemMeta identifier to search for. System.Int32 amount Multiplication of weight received from handle . Returns Type Description System.Boolean true if the handle can be added these amount of times. Exceptions Type Condition ItemMetaNotFoundException handle is unknown. System.ArgumentOutOfRangeException amount is lower than 1. | Improve this Doc View Source GetInsertableItems(IInventory, Boolean, Boolean, Boolean) Returns a list of items of this inventory which could be inserted into the targetInventory . The used filters can be specified. Declaration ICollection<IItem> GetInsertableItems(IInventory targetInventory, bool checkCapacity = true, bool checkFilter = true, bool checkMovable = true) Parameters Type Name Description IInventory targetInventory IInventory to check items to merge into. System.Boolean checkCapacity true if unavailable capacity removes item from possible items, false otherwise. System.Boolean checkFilter true if false inventory item filter result removes item from possible items, false otherwise. System.Boolean checkMovable true if unmovable items should be excluded from possible items, false otherwise. Returns Type Description System.Collections.Generic.ICollection < IItem > List of items that fit the created criteria. Exceptions Type Condition System.ArgumentNullException targetInventory is null. | Improve this Doc View Source GetItem(Guid) Returns the single item that matches the given runtimeId. Declaration IItem GetItem(Guid runtimeId) Parameters Type Name Description System.Guid runtimeId Unique runtimeId to search for. Returns Type Description IItem The item that has been found, null otherwise. | Improve this Doc View Source GetItem<T>(Guid) Returns the single item that matches the given runtimeId as the provided type T . Declaration T GetItem<T>(Guid runtimeId) where T : class, IItem Parameters Type Name Description System.Guid runtimeId Unique runtimeId to search for. Returns Type Description T The item that has been found, null otherwise. Type Parameters Name Description T Returned type of this item. | Improve this Doc View Source GetItemFitAmount(IItem) Returns an amount of items that could be inserted into this inventory of the given item . This calculation is based on the available capacity of this inventory. If this item is already in this inventory, this will calculate additional items. Declaration int GetItemFitAmount(IItem item) Parameters Type Name Description IItem item Item to take the IItem singleweight from. Returns Type Description System.Int32 Amount of additional items that would be able to insert. Exceptions Type Condition System.ArgumentNullException item is null. | Improve this Doc View Source GetItemFitAmount(ItemMeta) Returns an amount of items that could be inserted into this inventory of the given meta . Declaration int GetItemFitAmount(ItemMeta meta) Parameters Type Name Description ItemMeta meta ItemMeta to calculate the amount from. Returns Type Description System.Int32 Amount of items that would be able to insert. Exceptions Type Condition System.ArgumentNullException meta is null. | Improve this Doc View Source GetItemFitAmount(Int32) Returns an amount of items that could be inserted based on the given itemWeight . Declaration int GetItemFitAmount(int itemWeight) Parameters Type Name Description System.Int32 itemWeight Single weight to use as calculation base. Returns Type Description System.Int32 Amount of additional items that would be able to insert. Exceptions Type Condition System.ArgumentOutOfRangeException itemWeight is 0 or lower. | Improve this Doc View Source GetItemFitAmount(String) Returns an amount of items that could be inserted into this inventory of the given handle . Declaration int GetItemFitAmount(string handle) Parameters Type Name Description System.String handle ItemMeta handle to search for. Returns Type Description System.Int32 Amount of items that would be able to insert. Exceptions Type Condition System.ArgumentNullException handle is null, empty or whitespace. ItemMetaNotFoundException handle could not be found. | Improve this Doc View Source GetItems(String) Returns all items in this inventory that have the given handle . Declaration ICollection<IItem> GetItems(string handle) Parameters Type Name Description System.String handle Handle to search for. Returns Type Description System.Collections.Generic.ICollection < IItem > Found items with the given handle . Exceptions Type Condition System.ArgumentNullException handle is null or whitespace. | Improve this Doc View Source GetItems<T>(String) Returns a list of all items that are assignable to T . If handle is not empty, it has to match handle too. Declaration ICollection<T> GetItems<T>(string handle = null) where T : IItem Parameters Type Name Description System.String handle Restriction of items to only include items with specified handle. Returns Type Description System.Collections.Generic.ICollection <T> List of items that matched the given criteria. Type Parameters Name Description T Parent type of the items that should be included. | Improve this Doc View Source InsertItem(IItem, Boolean) Tries to insert the given item into this inventory. If the given item is already in any other inventory, it will be removed from the old one first. If an item, that is ready to be merged with the given item exists in this inventory, it will be merged into the first existing item and the given item will be disposed. Declaration bool InsertItem([NotNull] IItem item, bool force = false) Parameters Type Name Description IItem item The item that should be added. System.Boolean force true if checks regarding capacity and filter should be ignored. Returns Type Description System.Boolean true if the item has been added or merged, false otherwise. Exceptions Type Condition System.ArgumentNullException item is null. InventoryCapacityException Adding the item would exceed the current inventory capacity. | Improve this Doc View Source IsItemAllowed(IItem) Determines if the given item is allowed in inventory. Declaration bool IsItemAllowed([NotNull] IItem item) Parameters Type Name Description IItem item Item that should be checked. Returns Type Description System.Boolean true if item is allwed, false otherwise. Exceptions Type Condition System.ArgumentNullException item is null. | Improve this Doc View Source RemoveItem(IItem) Tries to remove the given item item from this inventory. Declaration bool RemoveItem([NotNull] IItem item) Parameters Type Name Description IItem item Item to remove. Returns Type Description System.Boolean true if the given item was found and successfully removed, false otherwise. Exceptions Type Condition System.ArgumentNullException item is null. | Improve this Doc View Source SetCapacity(Int32) Sets the capacity of this inventory to the given newCapacity . Declaration bool SetCapacity(int newCapacity) Parameters Type Name Description System.Int32 newCapacity New capacity to set the inventory to. Returns Type Description System.Boolean true if the usedcapacity was below or equal newCapacity and has been changed successfully, false otherwise. Exceptions Type Condition System.ArgumentOutOfRangeException newCapacity was too low. | Improve this Doc View Source SetItemFilter(InventoryDelegates.ItemFilterDelegate) Sets the filter of this inventory to only accept certain items into inventory. To remove the current filter and allow all items again, set the filter to null. Declaration void SetItemFilter(InventoryDelegates.ItemFilterDelegate filter) Parameters Type Name Description InventoryDelegates.ItemFilterDelegate filter Filter to set to."
  },
  "api/Micky5991.Inventory.Interfaces.IInventoryFactory.html": {
    "href": "api/Micky5991.Inventory.Interfaces.IInventoryFactory.html",
    "title": "Interface IInventoryFactory",
    "keywords": "Interface IInventoryFactory Factory that creates a specific implementation of IInventory . Namespace : Micky5991.Inventory.Interfaces Assembly : Micky5991.Inventory.dll Syntax [PublicAPI] public interface IInventoryFactory Methods | Improve this Doc View Source CreateInventory(Int32) Creates a new IInventory instance. Declaration IInventory CreateInventory(int capacity) Parameters Type Name Description System.Int32 capacity Capacity limit the inventory should have. Returns Type Description IInventory Newly created IInventory . Exceptions Type Condition System.ArgumentOutOfRangeException capacity is below 0."
  },
  "api/Micky5991.Inventory.Interfaces.IItem.html": {
    "href": "api/Micky5991.Inventory.Interfaces.IItem.html",
    "title": "Interface IItem",
    "keywords": "Interface IItem An item is some type of stack which can be contained inside an IInventory . Inherited Members System.ComponentModel.INotifyPropertyChanged.PropertyChanged Namespace : Micky5991.Inventory.Interfaces Assembly : Micky5991.Inventory.dll Syntax [PublicAPI] public interface IItem : INotifyPropertyChanged Properties | Improve this Doc View Source Amount Gets the positive amount of items which are represented by this instance. Declaration int Amount { get; } Property Value Type Description System.Int32 See Also SetAmount(Int32) | Improve this Doc View Source CurrentInventory Gets current reference to the IInventory where this item is contained in. Null is equal, that this item is currently in no IInventory . Declaration IInventory CurrentInventory { get; } Property Value Type Description IInventory | Improve this Doc View Source DefaultDisplayName Gets the original name of the item given by ItemMeta . This name can be used to reset the current display name back to its original state. Declaration string DefaultDisplayName { get; } Property Value Type Description System.String | Improve this Doc View Source DisplayName Gets the changable display name of this item. Declaration string DisplayName { get; } Property Value Type Description System.String See Also SetDisplayName(String) | Improve this Doc View Source Handle Gets an unique handle that identifies the items meta definition. Declaration string Handle { get; } Property Value Type Description System.String | Improve this Doc View Source Locked Gets or sets a value indicating whether specifies any action on this item is locked. Declaration bool Locked { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Meta Gets the underlying meta definition of this item, this is not changable after first initialization if IItemRegistry . Declaration ItemMeta Meta { get; } Property Value Type Description ItemMeta | Improve this Doc View Source MovingLocked Gets or sets a value indicating whether the item could be moved in any way. If Locked is true, this will be true nonetheless. Declaration bool MovingLocked { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source RuntimeId Gets a non persistant identifier of this item that should ONLY be used for communication in runtime and during the lifetime of this item. Declaration Guid RuntimeId { get; } Property Value Type Description System.Guid | Improve this Doc View Source SingleWeight Gets weight of one item in this instance of items. Declaration int SingleWeight { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Stackable Gets a value indicating whether this item is stackable or not. Typical characteristic of non-stackable items is the fixed Amount of 1. Declaration bool Stackable { get; } Property Value Type Description System.Boolean | Improve this Doc View Source TotalWeight Gets the total weight of this item instance. Depends on SingleWeight and Amount . Declaration int TotalWeight { get; } Property Value Type Description System.Int32 See Also SingleWeight Amount | Improve this Doc View Source WeightChangable Gets a value indicating whether the weight of this item is changable or not. Typical characteristic of weight-changable items is that calculations with this item type without the actual item tend to be inaccurate. Declaration bool WeightChangable { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source CanMergeWith(IItem) Determines if the current item can be merged with the sourceItem . Declaration bool CanMergeWith([NotNull] IItem sourceItem) Parameters Type Name Description IItem sourceItem Item to check if merging would work with the current item. Returns Type Description System.Boolean true if the merge process would succeed and is different from the current instance, false otherwise. Exceptions Type Condition System.ArgumentNullException sourceItem is null. See Also MergeItem(IItem) | Improve this Doc View Source IncreaseAmount(Int32) Increases the total Amount by amountIncrease . Declaration void IncreaseAmount(int amountIncrease) Parameters Type Name Description System.Int32 amountIncrease Value to increase the total Amount by. Exceptions Type Condition System.ArgumentOutOfRangeException amountIncrease is 0 or lower. ItemNotStackableException amountIncrease is too high for a non-stackable item. | Improve this Doc View Source Initialize() Setups the item right after its creation for any handling that is not possible in a virtual constructor. Declaration void Initialize() | Improve this Doc View Source MergeItem(IItem) Actual implementation of the item merging process. This merges the source item onto the current instance, so the given sourceItem will be disposed. Declaration void MergeItem([NotNull] IItem sourceItem) Parameters Type Name Description IItem sourceItem Item to merge into this. Exceptions Type Condition System.ArgumentNullException sourceItem is null. System.ArgumentException sourceItem is already this instance, sourceItem is not mergable with this item. See Also CanMergeWith(IItem) | Improve this Doc View Source ReduceAmount(Int32) Reduces the total Amount by amountReduce . Declaration void ReduceAmount(int amountReduce) Parameters Type Name Description System.Int32 amountReduce Value tu reduce the total Amount by. Exceptions Type Condition System.ArgumentOutOfRangeException amountReduce is higher than Amount or 0 or lower. | Improve this Doc View Source SetAmount(Int32) Updates the current count of items in this instance to the specified newAmount . This will change TotalWeight . Declaration void SetAmount(int newAmount) Parameters Type Name Description System.Int32 newAmount Updated amount of items this stack should represent. Exceptions Type Condition System.ArgumentOutOfRangeException newAmount is too low. ItemNotStackableException newAmount is too high for a non-stackable item. See Also TotalWeight | Improve this Doc View Source SetCurrentInventory(IInventory) /!\\ INTERNAL /! This methods updates the value of CurrentInventory to the current inventory. Use IInventory to set the item to the correct instance. Declaration void SetCurrentInventory(IInventory inventory) Parameters Type Name Description IInventory inventory Value to set the property CurrentInventory to. | Improve this Doc View Source SetDisplayName(String) Sets the current displayname of this item to the given displayName . This method updates DisplayName . Declaration void SetDisplayName(string displayName) Parameters Type Name Description System.String displayName New value to set the DisplayName to. Exceptions Type Condition System.ArgumentNullException displayName is null, empty or whitespace. See Also DefaultDisplayName | Improve this Doc View Source SetSingleWeight(Int32) Sets the single amount weight of this item. Declaration void SetSingleWeight(int weight) Parameters Type Name Description System.Int32 weight New value to set this item to. Exceptions Type Condition System.ArgumentOutOfRangeException weight is 0 or lower. | Improve this Doc View Source SplitItem(Int32) Splits the current item into two items and returns the created one. The current amount of this item will be deducted by targetAmount . To specify how to split the item, a IItemSplitStrategy can be specified in Initialize() . Declaration IItem SplitItem(int targetAmount) Parameters Type Name Description System.Int32 targetAmount Amount of created item. Returns Type Description IItem Newly created item. Exceptions Type Condition System.ArgumentOutOfRangeException targetAmount is 0 or lower or equal or higher than Amount . Events | Improve this Doc View Source Initialized Triggers when the item has been initialized. Declaration event EventHandler<ItemInitializedEventArgs> Initialized Event Type Type Description System.EventHandler < ItemInitializedEventArgs >"
  },
  "api/Micky5991.Inventory.Interfaces.IItemAction-2.html": {
    "href": "api/Micky5991.Inventory.Interfaces.IItemAction-2.html",
    "title": "Interface IItemAction<TOut, TIn>",
    "keywords": "Interface IItemAction<TOut, TIn> Item actions are options which are executable on items. Namespace : Micky5991.Inventory.Interfaces Assembly : Micky5991.Inventory.dll Syntax [PublicAPI] public interface IItemAction<TOut, TIn> where TOut : OutgoingItemActionData where TIn : IncomingItemActionData Type Parameters Name Description TOut Outgoing data for this item action. TIn Incoming data for this item action. Properties | Improve this Doc View Source RelatedItem Gets the reference to the item where this action was added to. Declaration IItem RelatedItem { get; } Property Value Type Description IItem | Improve this Doc View Source RuntimeId Gets a non persistant identifier of this action that should ONLY be used for communication in runtime and during the lifetime of this item. Declaration Guid RuntimeId { get; } Property Value Type Description System.Guid Methods | Improve this Doc View Source BuildActionData(Object) Builds the item action data that can be used for communication with an user interface. Declaration TOut BuildActionData(object receiver) Parameters Type Name Description System.Object receiver Instance of the receiver for which this data should be generated for. Returns Type Description TOut Created action data of this instance. | Improve this Doc View Source Execute(Object, TIn) Executes this action with given data. Declaration void Execute(object executor, TIn data) Parameters Type Name Description System.Object executor Instance that executes this action. Like a user that executes an action on an item. TIn data Data that holds information about the actual usage of this action. Exceptions Type Condition System.ArgumentNullException data is null. | Improve this Doc View Source IsEnabled(Object) Returns if the item action is enabled. Declaration bool IsEnabled(object receiver) Parameters Type Name Description System.Object receiver Reference to the receiver for which the enabled-status should be checked for. Returns Type Description System.Boolean true if the action is enabled, false otherwise. | Improve this Doc View Source IsVisible(Object) Returns if the item action is visible. Declaration bool IsVisible(object receiver) Parameters Type Name Description System.Object receiver Reference to the receiver for which the visibility should be checked for. Returns Type Description System.Boolean true if the action is visible, false otherwise. | Improve this Doc View Source SetEnabledCheck(InventoryDelegates.ActionEnabledDelegate) Sets the current check that will be used to determine if the action is enabled. If the action is not visible, this action is also implicitly disabled. Declaration IItemAction<TOut, TIn> SetEnabledCheck(InventoryDelegates.ActionEnabledDelegate enabledCheck) Parameters Type Name Description InventoryDelegates.ActionEnabledDelegate enabledCheck Callback that should be used. Pass null to remove check and always enable action. Returns Type Description IItemAction <TOut, TIn> Current IItemAction<TOut, TIn> instance. | Improve this Doc View Source SetRelatedItem(IItem) Sets the item reference where this action was added to. Declaration void SetRelatedItem(IItem item) Parameters Type Name Description IItem item Reference to the related item. Exceptions Type Condition System.ArgumentNullException item is null. | Improve this Doc View Source SetVisibleCheck(InventoryDelegates.ActionVisibleDelegate) Sets the current check that will be used to determine if the action is visible. Declaration IItemAction<TOut, TIn> SetVisibleCheck(InventoryDelegates.ActionVisibleDelegate visibleCheck) Parameters Type Name Description InventoryDelegates.ActionVisibleDelegate visibleCheck Callback that should be used. Pass null to remove check and always show action. Returns Type Description IItemAction <TOut, TIn> Current IItemAction<TOut, TIn> instance."
  },
  "api/Micky5991.Inventory.Interfaces.IItemFactory.html": {
    "href": "api/Micky5991.Inventory.Interfaces.IItemFactory.html",
    "title": "Interface IItemFactory",
    "keywords": "Interface IItemFactory Factory that creates actual implementations for IItem . Namespace : Micky5991.Inventory.Interfaces Assembly : Micky5991.Inventory.dll Syntax [PublicAPI] public interface IItemFactory Methods | Improve this Doc View Source CreateItem(ItemMeta, Int32) Creates an instance of IItem from the given meta . Declaration IItem CreateItem(ItemMeta meta, int amount) Parameters Type Name Description ItemMeta meta ItemMeta to create the item from. System.Int32 amount Positive amount of items the resulting item shout have. Returns Type Description IItem Instance of the requested meta . Exceptions Type Condition System.ArgumentNullException meta is null. System.ArgumentOutOfRangeException amount is too low. | Improve this Doc View Source CreateItem(String, Int32) Creates an instance of IItem and search IItemRegistry for the given handle . Declaration IItem CreateItem(string handle, int amount) Parameters Type Name Description System.String handle Handle to search for. System.Int32 amount Positive amount of items the resulting item shout have. Returns Type Description IItem Instance of the requested handle , null if no ItemMeta has been found. Exceptions Type Condition System.ArgumentNullException handle is null, empty or whitespace. System.ArgumentOutOfRangeException amount is too low. | Improve this Doc View Source CreateItems(ItemMeta, Int32) Creates a list of items from the given ItemMeta . If the item is not stackable, multiple items will be created with amount of 1 each. Declaration ICollection<IItem> CreateItems(ItemMeta meta, int amount) Parameters Type Name Description ItemMeta meta Definition of the item that should be created. System.Int32 amount Positive amount of items that should be created. Returns Type Description System.Collections.Generic.ICollection < IItem > The list of created items. Exceptions Type Condition System.ArgumentNullException meta is null. System.ArgumentOutOfRangeException amount is 0 or lower. | Improve this Doc View Source CreateItems(String, Int32) Creates a list of items from the given handle . If the item is not stackable, it will create multiple items with item amount of 1 each. Declaration ICollection<IItem> CreateItems(string handle, int amount) Parameters Type Name Description System.String handle Item identifier to search for. System.Int32 amount Positive amount of items that should be created. Returns Type Description System.Collections.Generic.ICollection < IItem > Created collection of items, null if no ItemMeta could be found. Exceptions Type Condition System.ArgumentNullException handle is null, empty or whitespace. System.ArgumentOutOfRangeException amount is 0 or lower."
  },
  "api/Micky5991.Inventory.Interfaces.IItemMergeStrategy.html": {
    "href": "api/Micky5991.Inventory.Interfaces.IItemMergeStrategy.html",
    "title": "Interface IItemMergeStrategy",
    "keywords": "Interface IItemMergeStrategy Strategy that defines certain behavior of the merging process of two IItem instances. Namespace : Micky5991.Inventory.Interfaces Assembly : Micky5991.Inventory.dll Syntax [PublicAPI] public interface IItemMergeStrategy : IStrategy Methods | Improve this Doc View Source CanBeMerged(IItem, IItem) Returns if the two given IItem instances can be merged or not. Declaration bool CanBeMerged(IItem targetItem, IItem sourceItem) Parameters Type Name Description IItem targetItem Instance of IItem that should merge sourceItem into itself. IItem sourceItem Instance of IItem that privides any needed data. Returns Type Description System.Boolean true if those given items can be merged. | Improve this Doc View Source MergeItemWith(IItem, IItem) Executes the actual merge process of sourceItem into targetItem . Declaration void MergeItemWith(IItem targetItem, IItem sourceItem) Parameters Type Name Description IItem targetItem Instance of IItem that should merge sourceItem into itself. IItem sourceItem Instance of IItem that privides any needed data."
  },
  "api/Micky5991.Inventory.Interfaces.IItemMergeStrategyHandler.html": {
    "href": "api/Micky5991.Inventory.Interfaces.IItemMergeStrategyHandler.html",
    "title": "Interface IItemMergeStrategyHandler",
    "keywords": "Interface IItemMergeStrategyHandler Handler that executes created methods on all registered IItemMergeStrategy . Inherited Members System.Collections.Generic.ICollection<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Add(Micky5991.Inventory.Interfaces.IItemMergeStrategy) System.Collections.Generic.ICollection<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Clear() System.Collections.Generic.ICollection<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Contains(Micky5991.Inventory.Interfaces.IItemMergeStrategy) System.Collections.Generic.ICollection<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.CopyTo(Micky5991.Inventory.Interfaces.IItemMergeStrategy[], System.Int32) System.Collections.Generic.ICollection<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Remove(Micky5991.Inventory.Interfaces.IItemMergeStrategy) System.Collections.Generic.ICollection<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.Count System.Collections.Generic.ICollection<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.IsReadOnly System.Collections.Generic.IEnumerable<Micky5991.Inventory.Interfaces.IItemMergeStrategy>.GetEnumerator() IItemMergeStrategy.CanBeMerged(IItem, IItem) IItemMergeStrategy.MergeItemWith(IItem, IItem) Namespace : Micky5991.Inventory.Interfaces Assembly : Micky5991.Inventory.dll Syntax [PublicAPI] public interface IItemMergeStrategyHandler : IStrategyHandler<IItemMergeStrategy>, ICollection<IItemMergeStrategy>, IEnumerable<IItemMergeStrategy>, IEnumerable, IItemMergeStrategy, IStrategy"
  },
  "api/Micky5991.Inventory.Interfaces.IItemRegistry.html": {
    "href": "api/Micky5991.Inventory.Interfaces.IItemRegistry.html",
    "title": "Interface IItemRegistry",
    "keywords": "Interface IItemRegistry Registry of ItemMeta indexed by item handle. Namespace : Micky5991.Inventory.Interfaces Assembly : Micky5991.Inventory.dll Syntax [PublicAPI] public interface IItemRegistry Methods | Improve this Doc View Source GetItemMeta() Returns a list of all available ItemMeta instances available to the inventory framework. Declaration ICollection<ItemMeta> GetItemMeta() Returns Type Description System.Collections.Generic.ICollection < ItemMeta > List of ItemMeta . | Improve this Doc View Source TryGetItemMeta(String, out ItemMeta) Returns the instance of ItemMeta for the given handle . Declaration bool TryGetItemMeta(string handle, out ItemMeta meta) Parameters Type Name Description System.String handle Unique handle to search for. ItemMeta meta Instance of ItemMeta that has been found by handle . Returns Type Description System.Boolean true if an ItemMeta instance has been found, false otherwise. Exceptions Type Condition System.ArgumentNullException meta is null, empty or whitespace. See Also BaseItemRegistry"
  },
  "api/Micky5991.Inventory.Interfaces.IItemSplitStrategy.html": {
    "href": "api/Micky5991.Inventory.Interfaces.IItemSplitStrategy.html",
    "title": "Interface IItemSplitStrategy",
    "keywords": "Interface IItemSplitStrategy Strategy that specifies the behavior how to split an item into a second one. Namespace : Micky5991.Inventory.Interfaces Assembly : Micky5991.Inventory.dll Syntax [PublicAPI] public interface IItemSplitStrategy : IStrategy Methods | Improve this Doc View Source SplitItem(IItem, IItem) Executes a split from oldItem into the item newItem . Declaration void SplitItem(IItem oldItem, IItem newItem) Parameters Type Name Description IItem oldItem Instance of IItem to extract the data from. IItem newItem Instance of IItem to apply the splitted data to."
  },
  "api/Micky5991.Inventory.Interfaces.IItemSplitStrategyHandler.html": {
    "href": "api/Micky5991.Inventory.Interfaces.IItemSplitStrategyHandler.html",
    "title": "Interface IItemSplitStrategyHandler",
    "keywords": "Interface IItemSplitStrategyHandler Handler that executes created methods on all registered IItemSplitStrategy . Inherited Members System.Collections.Generic.ICollection<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Add(Micky5991.Inventory.Interfaces.IItemSplitStrategy) System.Collections.Generic.ICollection<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Clear() System.Collections.Generic.ICollection<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Contains(Micky5991.Inventory.Interfaces.IItemSplitStrategy) System.Collections.Generic.ICollection<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.CopyTo(Micky5991.Inventory.Interfaces.IItemSplitStrategy[], System.Int32) System.Collections.Generic.ICollection<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Remove(Micky5991.Inventory.Interfaces.IItemSplitStrategy) System.Collections.Generic.ICollection<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.Count System.Collections.Generic.ICollection<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.IsReadOnly System.Collections.Generic.IEnumerable<Micky5991.Inventory.Interfaces.IItemSplitStrategy>.GetEnumerator() IItemSplitStrategy.SplitItem(IItem, IItem) Namespace : Micky5991.Inventory.Interfaces Assembly : Micky5991.Inventory.dll Syntax [PublicAPI] public interface IItemSplitStrategyHandler : IStrategyHandler<IItemSplitStrategy>, ICollection<IItemSplitStrategy>, IEnumerable<IItemSplitStrategy>, IEnumerable, IItemSplitStrategy, IStrategy"
  },
  "api/Micky5991.Inventory.Interfaces.IStrategy.html": {
    "href": "api/Micky5991.Inventory.Interfaces.IStrategy.html",
    "title": "Interface IStrategy",
    "keywords": "Interface IStrategy Base interface of any behavior strategy. This instance can be used for any specific implementation of IStrategyHandler<T> . Namespace : Micky5991.Inventory.Interfaces Assembly : Micky5991.Inventory.dll Syntax [PublicAPI] public interface IStrategy"
  },
  "api/Micky5991.Inventory.Interfaces.IStrategyHandler-1.html": {
    "href": "api/Micky5991.Inventory.Interfaces.IStrategyHandler-1.html",
    "title": "Interface IStrategyHandler<T>",
    "keywords": "Interface IStrategyHandler<T> Handler that executes all added T . Inherited Members System.Collections.Generic.ICollection<T>.Add(T) System.Collections.Generic.ICollection<T>.Clear() System.Collections.Generic.ICollection<T>.Contains(T) System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) System.Collections.Generic.ICollection<T>.Remove(T) System.Collections.Generic.ICollection<T>.Count System.Collections.Generic.ICollection<T>.IsReadOnly System.Collections.Generic.IEnumerable<T>.GetEnumerator() Namespace : Micky5991.Inventory.Interfaces Assembly : Micky5991.Inventory.dll Syntax [PublicAPI] public interface IStrategyHandler<T> : ICollection<T>, IEnumerable<T>, IEnumerable where T : IStrategy Type Parameters Name Description T Implementation of IStrategy that should be handled."
  },
  "api/Micky5991.Inventory.InventoryDelegates.ActionEnabledDelegate.html": {
    "href": "api/Micky5991.Inventory.InventoryDelegates.ActionEnabledDelegate.html",
    "title": "Delegate InventoryDelegates.ActionEnabledDelegate",
    "keywords": "Delegate InventoryDelegates.ActionEnabledDelegate Delegate that checks if the action is enabled. If action is not visible, it is also disabled by default. Namespace : Micky5991.Inventory Assembly : Micky5991.Inventory.dll Syntax public delegate bool ActionEnabledDelegate(object receiver); Parameters Type Name Description System.Object receiver Reference to the receiver for which the enabled-status should be checked for. Returns Type Description System.Boolean true if action should be enabled, false otherwise."
  },
  "api/Micky5991.Inventory.InventoryDelegates.ActionVisibleDelegate.html": {
    "href": "api/Micky5991.Inventory.InventoryDelegates.ActionVisibleDelegate.html",
    "title": "Delegate InventoryDelegates.ActionVisibleDelegate",
    "keywords": "Delegate InventoryDelegates.ActionVisibleDelegate Delegate that checks if this action is visible at all. Namespace : Micky5991.Inventory Assembly : Micky5991.Inventory.dll Syntax public delegate bool ActionVisibleDelegate(object receiver); Parameters Type Name Description System.Object receiver Receiver of this information or for which instance the visibility should be determined from. Returns Type Description System.Boolean true if action should be visible, false otherwise."
  },
  "api/Micky5991.Inventory.InventoryDelegates.html": {
    "href": "api/Micky5991.Inventory.InventoryDelegates.html",
    "title": "Class InventoryDelegates",
    "keywords": "Class InventoryDelegates Collection of available delegates of this project. Inheritance System.Object InventoryDelegates Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory Assembly : Micky5991.Inventory.dll Syntax public static class InventoryDelegates"
  },
  "api/Micky5991.Inventory.InventoryDelegates.ItemFilterDelegate.html": {
    "href": "api/Micky5991.Inventory.InventoryDelegates.ItemFilterDelegate.html",
    "title": "Delegate InventoryDelegates.ItemFilterDelegate",
    "keywords": "Delegate InventoryDelegates.ItemFilterDelegate Delegate to specify if the given item matches these requirements. Namespace : Micky5991.Inventory Assembly : Micky5991.Inventory.dll Syntax public delegate bool ItemFilterDelegate(IItem item); Parameters Type Name Description IItem item Instance of IItem to check. Returns Type Description System.Boolean true if requirements are met, false otherwise."
  },
  "api/Micky5991.Inventory.ItemMeta.html": {
    "href": "api/Micky5991.Inventory.ItemMeta.html",
    "title": "Class ItemMeta",
    "keywords": "Class ItemMeta This type gives basic information about an item without creation. Inheritance System.Object ItemMeta Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Micky5991.Inventory Assembly : Micky5991.Inventory.dll Syntax public class ItemMeta Constructors | Improve this Doc View Source ItemMeta(String, Type, String, Int32, ItemFlags) Initializes a new instance of the ItemMeta class. Declaration public ItemMeta(string handle, Type type, string displayName, int defaultWeight, ItemFlags flags = ItemFlags.None) Parameters Type Name Description System.String handle Unique handle of item. System.Type type Underlying type of item that this item will be implemented of. System.String displayName Default display name this item should have. System.Int32 defaultWeight Default item weight of this item. ItemFlags flags Behaviour flags of this item. Exceptions Type Condition System.ArgumentException type is invalid. System.ArgumentNullException handle or type is null. System.ArgumentOutOfRangeException defaultWeight is 0 or lower. Properties | Improve this Doc View Source DefaultWeight Gets the weight of the final item. Declaration public int DefaultWeight { get; } Property Value Type Description System.Int32 | Improve this Doc View Source DisplayName Gets the default display name of the created item. Declaration public string DisplayName { get; } Property Value Type Description System.String | Improve this Doc View Source Flags Gets the flag collection that represent different item abilities. Declaration public ItemFlags Flags { get; } Property Value Type Description ItemFlags | Improve this Doc View Source Handle Gets the unique handle of this meta information. Declaration public string Handle { get; } Property Value Type Description System.String | Improve this Doc View Source Type Gets the implementation type of the item this meta will be represented by. Declaration public Type Type { get; } Property Value Type Description System.Type"
  },
  "documentation/Actions.html": {
    "href": "documentation/Actions.html",
    "title": "Actions",
    "keywords": "Actions This framework offers a way to create actions which can be used to execute them on their related items. To show that an item is compatible with the built in actions use the IActionableItem<TOut, TIn> interface or inherit your item class from ActionableItem<TOut, TIn> instead of Item . Recommendation: Create an abstract class to base all your items from, so extending your custom classes will be much easier! Data To communicate with an user interface all actions offer a way to collect payloads from the actions of an item. The base classes for data from or to actions should be inherited from IncomingItemActionData and OutgoingItemActionData . Create Action classes Actions offer a convenient way to design flexible interfaces or ways to interact with your items without the need to create each item from scratch. Recommendation: Create an abstract class to base all your actions from, so extending your custom classes will be much easier! Examples There are different kinds of actions you could create, for example: Use item Dispose item Process item (If you have some kind of Ore-Item and you are standing near an processing-tool in a game) Combine item with other items in the same inventory Shuffle item (If your item is a card deck and you want to reset its internal card stack) Tip: If you just create basic types of actions you gain the ability to style your actions from the type of action. Add some callbacks with input-parameters and offer the user input options. Or a displayname with description to show further details. Class implementation using System; using Micky5991.Inventory.Data; using Micky5991.Inventory.Entities.Actions; namespace Some.Application.Actions { public class UseAction : ItemActionBase<OutgoingItemActionData, IncomingItemActionData> { private readonly string displayName; private readonly Action callback; public UseAction(string displayName, Action callback) { this.displayName = displayName; this.callback = callback; } public override void Execute(IncomingItemActionData data) { this.callback(); } public override OutgoingItemActionData BuildActionData() { return new OutgoingItemActionData(this.RuntimeId); } } } Bind actions to items Actions are bound to items when you return a list of action instances from the RegisterAllActions() after inheriting from ActionableItem<TOut, TIn> . using System.Collections.Generic; using Micky5991.Inventory; using Micky5991.Inventory.AggregatedServices; using Micky5991.Inventory.Data; using Micky5991.Inventory.Entities.Item.Subtypes; using Micky5991.Inventory.Interfaces; namespace Inventory.Example.Items { public class WaterItem : ActionableItem<OutgoingItemActionData, IncomingItemActionData> { public WaterItem(ItemMeta meta, AggregatedItemServices itemServices) : base(meta, itemServices) { } protected override IEnumerable<IItemAction<OutgoingItemActionData, IncomingItemActionData>> RegisterAllActions() { // Return an instance per action here yield return new ExampleAction(\"Action title\"); } } } Executing actions Items that implement the IActionableItem<TOut, TIn> interface offer the ExecuteAction(TIn data) method. If you pass a payload of the type IncomingItemActionData , it will call the Execute(TIn data) method in the correct action, if the action is enabled. item.ExecuteAction(TIn data);"
  },
  "documentation/Custom-Setup.html": {
    "href": "documentation/Custom-Setup.html",
    "title": "Custom setup",
    "keywords": "Custom setup There are different ways to register needed services to the service container. Needed core services There are some services which are needed, so the framework can run at all. serviceCollection.AddInventoryServices(); IItemRegistry This service holds all ItemMeta instances and can be searched for available items. This is needed if any default service is in use. serviceCollection.AddItemTypes(IItemRegistry itemRegistry); Strategy-handler Strategy-handlers are used to handle a collection of strategies and aggregate results. Micky5991.Inventory.Iterfaces.IItemMergeStrategyHandler // Own implementation serviceCollection .AddTransient<IItemMergeStrategyHandler, ItemMergeStrategyHandler>(); // Default implementation serviceCollection .AddDefaultInventoryMergeStrategy(); Micky5991.Inventory.Iterfaces.IItemSplitStrategyHandler // Own implementation serviceCollection .AddTransient<IItemSplitStrategyHandler, ItemSplitStrategyHandler>(); // Default implementation serviceCollection .AddDefaultInventorySplitStrategy(); Factories Factories are used to create instances with certain data. Micky5991.Inventory.Iterfaces.IInventoryFactory // Own implementation serviceCollection .AddTransient<IInventoryFactory, InventoryFactory>() // Default implementation serviceCollection .AddDefaultInventoryFactory(); Micky5991.Inventory.Iterfaces.IItemFactory // Own implementation serviceCollection .AddTransient<IInventoryFactory, InventoryFactory>() // Default implementation serviceCollection .AddDefaultInventoryFactory();"
  },
  "documentation/index.html": {
    "href": "documentation/index.html",
    "title": "Documentation",
    "keywords": "Documentation The aim of this documentation is to give further information and intentions about certain aspects of this framework. All interfaces, public and protected members are documentated and the IDE of your choice should suggest information regarding the part you are using. Table of contents Installation Custom setup Item Inventory"
  },
  "documentation/Installation.html": {
    "href": "documentation/Installation.html",
    "title": "Installation",
    "keywords": "Installation Requirements The following requirements and libraries are needed to use this inventory framework. .NET Standard 2.0 Look into the .NET Standard implementation support table to see which platforms are supported. Microsoft.Extensions.DependencyInjection 3.1 You can also use compatible libraries that implement interfaces of Microsoft.Extensions.DependencyInjection . Recommendation For improved unit-testability and flexibility you should only use provided interfaces of this library. Default setup To setup needed dependencies use the provided extensions on instances that implement IServiceCollection . Setup item-registry In order to create available item-meta definitions, you have to create a class that inherits from Micky5991.Inventory.BaseItemRegistry : using System.Collections.Generic; using Some.Application.Items; using Micky5991.Inventory; using Micky5991.Inventory.Enums; namespace Some.Application { public class ItemRegistry : BaseItemRegistry { protected override IEnumerable<ItemMeta> LoadItemMeta() { // List unique entries which items are available to the inventory system. yield return this.CreateItemMeta<AppleItem>(\"apple\", \"Apple\"); yield return this.CreateItemMeta<WaterItem>(\"water\", \"Water\"); yield return this.CreateItemMeta<DiceItem>(\"dice\", \"Dice\", flags: ItemFlags.NotStackable); } } } Register services If you do not want to create own factories, inventory or strategyhandlers, just use the general extension: /// ... IServiceCollection serviceCollection = new Microsoft.Extensions.DependencyInjection.ServiceCollection(); serviceCollection .AddDefaultInventoryServices() // Add all default services to service container .AddItemTypes(new Some.Application.ItemRegistry()); // Load and setup container for all available items. /// ... Custom setup To setup custom services and provide own ways how the framework reacts, just read about the custom setup ."
  },
  "documentation/Inventory.html": {
    "href": "documentation/Inventory.html",
    "title": "Inventory",
    "keywords": "Inventory The inventory is a container that holds items. The amount of items is only limited by the inventory capacity and item weight. Remarks The inventory is a collection of items that has an arbitrary finite capacity. It can contain unlimited item-instances but the total weight of all items cannot exceed the inventory capacity. If the inventory receives individual item instances, it tries to merge them into already inserted item instances based on specified strategies defined in items. Inventories are able to define which items are accepted. InventoryFactory To create an IInventory use the factory like this: using Micky5991.Inventory.Interfaces; IInventoryFactory inventoryFactory = serviceProvider.GetRequiredService<IInventoryFactory>(); var inventory = inventoryFactory.CreateInventory(100); Filter accepted items The inventory can be restricted to certain items, so it prevents the insertion of non-fitting items. Warning: If you change the filter while items are already in it, the filter will only be applied to new items. // Reset filter and accept all incoming inventory.SetItemFilter(null); // Restrict item to food items inventory.SetItemFilter(item => item is IFarmingItem);"
  },
  "documentation/Item.html": {
    "href": "documentation/Item.html",
    "title": "Item",
    "keywords": "Item An item instance that implements Micky5991.Inventory.Interface.IItem is a stack of items and it can exist outside an inventory. Remarks An item is a virtual element that contains actions and has an amount. Items are stackable by default if not defined otherwise in item meta. Characteristics of items are defined in item meta. The total weight of an item is based on the factors single-amount weight and the amount. total-weight = single-weight * amount The weight of an item-instance is not changable in runtime if not defined otherwise in item meta. Unstackable items cannot merge with the same kind and are limited to amount of 0 or 1. Items have display-names which are changable in runtime at any time. Each item can specify a strategy on how to merge with other item instances. The default merge strategy has the following requirements Both items are stackable. Both items are from the same kind (handle). Both items have equal single-weight. ItemFactory To create an item use the IItemFactory service as follows: Single item or stackable items using Micky5991.Inventory.Interfaces; IItemFactory itemFactory = serviceProvider.GetRequiredService<IItemFactory>(); IItemRegistry itemRegistry = serviceProvider.GetRequiredService<IItemRegistry>(); // Overload with item-handle var apple = itemfactory.CreateItem(\"apple\", 1); // Overload with item-meta if (itemRegistry.TryGetItemMeta(\"apple\", out var meta)) { var apple = itemfactory.CreateItem(meta, 1); } Non-Stackable item If the item is not stackable and multiple items should be created, use CreateItems : using Micky5991.Inventory.Interfaces; IItemFactory itemFactory = serviceProvider.GetRequiredService<IItemFactory>(); IItemRegistry itemRegistry = serviceProvider.GetRequiredService<IItemRegistry>(); // Overload with item-handle var apples = itemfactory.CreateItems(\"apple\", 10); // Overload with item-meta if (itemRegistry.TryGetItemMeta(\"apple\", out var meta)) { var apples = itemfactory.CreateItems(meta, 10); } Add item to inventory Any instance of IItem can be added to an inventory with the following method in IInventory : inventory.InsertItem(IItem item); Locking Locking is a native way to prevent item from leaving its current inventory state or to execute actions on the item. Complete lock A complete lock is achieved by executing the following method and currently prevents the item from executing any actions and leaving its inventory state. item.Locked = state; Lock movement Movement lock prevents the item from leaving its current inventory state. The movement is also locked if the item has been locked with item.Locked . item.MovingLocked = state; Weight The item always has non-zero weight and has two weight values to work with. The value type of the weight is integer, because it offers the most precision. If you want to display them with decimals in your interfaces, just divide all weight-values by your value. For example if you want to display values like: 100.00 , multiply/divide by 100 . Single weight The single weight is the total weight of this item, if the amount of the item would be equal to 1. It is a factor in calculation for item.TotalWeight The single weight is changable if this ability is specified in ItemMeta (See ItemRegistry ). Changing single weight respects the boundaries of the current inventory of the item. // Get current single weight item.SingleWeight // Set current single weight (If changable) item.SetSingleWeight(int newWeight); Total weight The total weight is the product of item.Amount and item.SingleWeight . The total weight is not changable. Only if you alter item.Amount or item.SingleWeight . item.TotalWeight; Destroy item To destroy an item you just have to set its amount to 0. If the amount drops to 0 it will be removed from its current inventory automatically. item.SetAmount(0); Create own child-classes The main advantage of this inventory framework is the ability to create custom implementations for each item and add custom logic to each item individually. Basic class To create your own implementation you just have to inherit from Micky5991.Inventory.Entities.Item.Item and start adding some custom behavior. Recommendation: Create an abstract class to base all your items from, so extending your custom classes will be much easier! using Micky5991.Inventory; using Micky5991.Inventory.AggregatedServices; using Micky5991.Inventory.Entities.Item; namespace Some.Application { public class AppleItem : Item { public AppleItem(ItemMeta meta, AggregatedItemServices itemServices) : base(meta, itemServices) { } } } Constructor injection All items are resolved from the service provider, so all services you registered are available to you. To request registered services, just add them to your constructor of the item: using Micky5991.Inventory; using Micky5991.Inventory.AggregatedServices; using Micky5991.Inventory.Entities.Item; using Some.Application.Interfaces; namespace Some.Application { public class AppleItem : Item { private IPlayerManager playerManager; public AppleItem(IPlayerManager playerManager, ItemMeta meta, AggregatedItemServices itemServices) : base(meta, itemServices) { this.playerManager = playerManager; } } } Custom strategies If you want to specify custom strategies in your item to split items or merge others into this, just overload the method SetupStrategies : using Micky5991.Inventory; using Micky5991.Inventory.AggregatedServices; using Micky5991.Inventory.Entities.Item; using Some.Application.Interfaces; namespace Some.Application { public class AppleItem : Item { // ... protected override void SetupStrategies() { base.SetupStrategies(); // Adds default strategies this.ItemMergeStrategyHandler.Add(new MyAwesomeMergeStrategy()); this.ItemSplitStrategyHandler.Add(new MyAwesomeSplitStrategy()); } // ... } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "Inventory",
    "keywords": "Inventory Micky5991.Inventory is a general purpose inventory framework that aims to provide a versatile base for games or other applications where inventories with virtual items are useful. Getting started To get started with Micky5991.Inventory, look into our guide on how to start using this library. API reference All interfaces and public classes are documented and available under the API Reference . License MIT License Copyright (c) 2020 Francesco Paolocci Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  }
}